{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "EKamwimyA_4d"
   },
   "outputs": [],
   "source": [
    "from IPython.display import display, Math, Latex\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import numpy_financial as npf\n",
    "import yfinance as yf\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import datetime\n",
    "import csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "h_MU1a6cA_4g"
   },
   "source": [
    "## Group Assignment\n",
    "### Team Number: 06\n",
    "### Team Member Names: Alan, Andrew, Haaris\n",
    "### Team Strategy Chosen: Risky"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0P-D4c3V_i0L"
   },
   "source": [
    "# Introducing: The6ixRoboAdvisor\n",
    "Our team of developers have come up with a three-staged algorithmic process, to take a list of stock tickers and provide an in-depth investment recommendation to clients using the stocks provided. This investment's purpose is to see the largest deviation from the portfolio's starting value after the week, whether that be through a loss in portfolio value or a gain. \n",
    "\n",
    "The first step involves a filtration process. This first step of our algorithm is meant to read in the provided tickers and remove all tickers that do not fall under the given criteria from consideration. If a stock does match our criteria, deemed appropriate for consideration all relevant information such as it's ticker, daily close price and daily rate of return for every day since March 1, 2022 are stored to be used in the next step of the algorithm, data analysis.\n",
    "\n",
    "In this second step of our RoboAdvisor, we use historical stock data to calculate crucial figures related to the volatility of the stocks remaining. The main purpose of this section is to determine possible \"hero\" stocks, defined as stocks that we have outlined as especially volatile, that could potentially drive our final portfolio. Essentially, we know that any level of diversification will most likely decrease the overall deviation of our final portfolio. Therefore, the first part of our strategy is determining the most volatile stock, by different figures. Additionally, we will always invest in 12 stocks, as diversification is counterintuitive to our goal. We use, maximum standard deviation (most volatile), maximum beta value (most volatile in upward direction) and minimum beta value (most volatile in downward direction), identifying which stock applies for each of these categories and labeling each as a \"hero stock\". For each of these three hero stocks we determine the correlation between the remaining stocks and it. For each hero stock, the 11 securities with the closest correlation are added to a portfolio with the hero stock. This way these 11 securities are as close as possible to this \"most volatile stock\". This allows us to end with 3 lists containing 12 stock tickers each, with one of the 12 already identified as the hero stock.\n",
    "\n",
    "Next we run a week long stock simulator, seeing which of the 3 hero stocks has the higehst deviation each week. This process occurs for every 5 trding day chain from March 1, 2022 until present day. For each iteration, the hero stock that deviates the most from it's starting value gets 1 point as the winner. By the end of the simulations, the hero stock with the most winner points is determined the most risky stock. \n",
    "\n",
    "Now that the final most volatile stock has been identified we must invest in a minimum of 12 stocks, with a minimum of 100/(2n)% of the starting investment amount in each stock (n = total number of stocks) and a maximum of 25%. After some calculations we determine weightings of the portfolio that comply with these rules and put as much money as possible in the hero stock, and then those most closely correlated. Once the weightings are determined we can calculate the number of shares to purchase of each portfolio and return our final comprehensive investment portfolio as determined by our RoboAdvisor!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QdyOT1WTOKFP"
   },
   "source": [
    " # Reading In Tickers\n",
    " The function read_in_tickers(filename) takes a filename and reads in the file as a dataframe. It takes the tickers provided and outputs them stored in a flat list tickers_list. The function is called for the file \"Tickers.csv\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "FyCdhSY5A_4i",
    "outputId": "eac5dcbc-9652-48c0-bfea-919bad67b72d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['AAPL',\n",
       " 'ABBV',\n",
       " 'ABT',\n",
       " 'ACN',\n",
       " 'AGN',\n",
       " 'AIG',\n",
       " 'AMZN',\n",
       " 'AXP',\n",
       " 'BA',\n",
       " 'BAC',\n",
       " 'BIIB',\n",
       " 'BK',\n",
       " 'BLK',\n",
       " 'BMY',\n",
       " 'C',\n",
       " 'CAT',\n",
       " 'CELG',\n",
       " 'CL',\n",
       " 'CMCSA',\n",
       " 'COF',\n",
       " 'COP',\n",
       " 'COST',\n",
       " 'CSCO',\n",
       " 'CVS',\n",
       " 'GM',\n",
       " 'GOOG',\n",
       " 'JPM',\n",
       " 'KMI',\n",
       " 'KO',\n",
       " 'LLY',\n",
       " 'LMT',\n",
       " 'MO',\n",
       " 'MON',\n",
       " 'MRK',\n",
       " 'MS',\n",
       " 'MSFT',\n",
       " 'NEE',\n",
       " 'NKE',\n",
       " 'ORCL',\n",
       " 'OXY',\n",
       " 'PCLN',\n",
       " 'PEP',\n",
       " 'PFE',\n",
       " 'PG',\n",
       " 'PM',\n",
       " 'PYPL',\n",
       " 'QCOM',\n",
       " 'RTN',\n",
       " 'RY.TO',\n",
       " 'SBUX',\n",
       " 'SLB',\n",
       " 'SO',\n",
       " 'SPG',\n",
       " 'T',\n",
       " 'TD.TO',\n",
       " 'TGT',\n",
       " 'TWX',\n",
       " 'TXN',\n",
       " 'UNH',\n",
       " 'UNP',\n",
       " 'UPS',\n",
       " 'USB']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def read_in_tickers(filename):\n",
    "    tickers = pd.read_csv(filename, header=None)\n",
    "    tickers.columns = [\"Ticker\"]   #Gives title for tickers column\n",
    "    return tickers.Ticker.tolist()\n",
    "tickers_list = read_in_tickers('Tickers.csv')\n",
    "tickers_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OAI6g_aWOrqh"
   },
   "source": [
    " # Determining Invalid Months\n",
    "The function invalid_months(start_date, end_date) takes a start and end date and returns a list of months which have under 20 trading days. This list of months will be useful for the main filter functions as they are not considered for average volume calculations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 340
    },
    "id": "j7KyuG8GA_4j",
    "outputId": "c16e9eee-4937-4018-aa4a-7d304b4ecbfd"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['2022-02']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Find months considered invalid for the purposes of filtering calculations. This would be the same for all American\n",
    "#securities so to boost efficiency, just calculate it for one\n",
    "def invalid_months(start_date, end_date):\n",
    "    months_to_remove = []\n",
    "    company_data = yf.Ticker('AAPL')\n",
    "    company_fin_hist = company_data.history(start=start_date, end=end_date)\n",
    "    \n",
    "    #For each month in the time interval (except November) we check if there are less than 20 days in the month, if so\n",
    "    #we append the 'yyyy-mm' string to a list of months to remove in the filtering\n",
    "    for i in range(1, 10):\n",
    "        month_days = len(company_fin_hist.filter(like = f'2022-0{i}', axis=0))\n",
    "        if month_days < 20:\n",
    "            months_to_remove.append(f'2022-0{i}')\n",
    "            \n",
    "    #Follow the same process as in the for loop for the first 10 months, just for November.\n",
    "    month_days = len(company_fin_hist.filter(like=f'2022-10', axis=0))\n",
    "    if month_days < 20:\n",
    "            months_to_remove.append(f'2022-10')\n",
    "    \n",
    "    #Return the lists of months to remove (which have under 20 trading days)\n",
    "    return months_to_remove\n",
    "\n",
    "#Calling the function for the given interval\n",
    "vetoed_months = invalid_months('2022-01-01', '2022-11-01')\n",
    "vetoed_months"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0poOI58HOwts"
   },
   "source": [
    " # Filtering Invalid Tickers\n",
    "The function filter_tickers(tickers, start_date, end_date) takes the list of generated tickers from the given csv file as well as a start and end date. For each ticker in the list of tickers we add all the tickers with an average monthly value >= 200000, in the US Market to a list of filtered tickers. Additionally we create two dataframes, one with the daily close prices from March 2022 to the current date and one with the daily rate of return over that same time period. These 3 structures are returned as a tuple and can then all be accessed for our data analysis, as they each contain necessary data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 218
    },
    "id": "DecnTG0IA_4j",
    "outputId": "577b5527-8715-4913-bb25-6a5b11a527e2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- AGN: No data found, symbol may be delisted\n",
      "AGN does not currently exist or does not have sufficient trading volume for consideration\n",
      "- CELG: No data found, symbol may be delisted\n",
      "CELG does not currently exist or does not have sufficient trading volume for consideration\n",
      "- PCLN: No data found for this date range, symbol may be delisted\n",
      "PCLN does not currently exist or does not have sufficient trading volume for consideration\n",
      "- RTN: No data found, symbol may be delisted\n",
      "RTN does not currently exist or does not have sufficient trading volume for consideration\n",
      "RY.TO is not a valid stock listed in the American market\n",
      "TD.TO is not a valid stock listed in the American market\n",
      "- TWX: No data found for this date range, symbol may be delisted\n",
      "TWX does not currently exist or does not have sufficient trading volume for consideration\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(['AAPL',\n",
       "  'ABBV',\n",
       "  'ABT',\n",
       "  'ACN',\n",
       "  'AIG',\n",
       "  'AMZN',\n",
       "  'AXP',\n",
       "  'BA',\n",
       "  'BAC',\n",
       "  'BIIB',\n",
       "  'BK',\n",
       "  'BLK',\n",
       "  'BMY',\n",
       "  'C',\n",
       "  'CAT',\n",
       "  'CL',\n",
       "  'CMCSA',\n",
       "  'COF',\n",
       "  'COP',\n",
       "  'COST',\n",
       "  'CSCO',\n",
       "  'CVS',\n",
       "  'GM',\n",
       "  'GOOG',\n",
       "  'JPM',\n",
       "  'KMI',\n",
       "  'KO',\n",
       "  'LLY',\n",
       "  'LMT',\n",
       "  'MO',\n",
       "  'MON',\n",
       "  'MRK',\n",
       "  'MS',\n",
       "  'MSFT',\n",
       "  'NEE',\n",
       "  'NKE',\n",
       "  'ORCL',\n",
       "  'OXY',\n",
       "  'PEP',\n",
       "  'PFE',\n",
       "  'PG',\n",
       "  'PM',\n",
       "  'PYPL',\n",
       "  'QCOM',\n",
       "  'SBUX',\n",
       "  'SLB',\n",
       "  'SO',\n",
       "  'SPG',\n",
       "  'T',\n",
       "  'TGT',\n",
       "  'TXN',\n",
       "  'UNH',\n",
       "  'UNP',\n",
       "  'UPS',\n",
       "  'USB'],\n",
       "             AAPL Close  ABBV Close   ABT Close   ACN Close  AIG Close  \\\n",
       " Date                                                                    \n",
       " 2022-03-01  162.465012  143.626770  116.629723  307.955933  56.881618   \n",
       " 2022-03-02  165.809891  145.455048  118.791176  314.859833  59.976746   \n",
       " 2022-03-03  165.481369  146.271927  119.393234  315.473083  59.357719   \n",
       " 2022-03-04  162.435150  146.417801  119.827499  310.735291  56.478760   \n",
       " 2022-03-07  158.582596  145.338348  117.310730  301.694916  53.717705   \n",
       " ...                ...         ...         ...         ...        ...   \n",
       " 2022-11-18  151.289993  154.979996  103.870003  286.500000  59.820000   \n",
       " 2022-11-21  148.009995  157.110001  103.879997  287.019989  60.110001   \n",
       " 2022-11-22  150.179993  159.789993  104.870003  292.890015  60.880001   \n",
       " 2022-11-23  151.070007  159.389999  106.019997  294.529999  60.959999   \n",
       " 2022-11-25  148.110001  159.619995  106.959999  296.399994  61.080002   \n",
       " \n",
       "             AMZN Close   AXP Close    BA Close  BAC Close  BIIB Close  ...  \\\n",
       " Date                                                                   ...   \n",
       " 2022-03-01  151.141998  176.221283  194.910004  41.746269  210.339996  ...   \n",
       " 2022-03-02  152.052505  178.448059  197.809998  42.424511  207.789993  ...   \n",
       " 2022-03-03  147.898499  178.032394  188.850006  41.970142  211.229996  ...   \n",
       " 2022-03-04  145.641006  171.164062  180.839996  40.448978  209.449997  ...   \n",
       " 2022-03-07  137.453003  157.486786  169.169998  37.870914  205.779999  ...   \n",
       " ...                ...         ...         ...        ...         ...  ...   \n",
       " 2022-11-18   94.139999  152.500000  173.889999  37.189999  302.890015  ...   \n",
       " 2022-11-21   92.459999  152.809998  172.940002  37.310001  301.630005  ...   \n",
       " 2022-11-22   93.199997  154.580002  172.500000  37.490002  306.720001  ...   \n",
       " 2022-11-23   94.129997  153.929993  174.850006  37.610001  303.450012  ...   \n",
       " 2022-11-25   93.410004  154.149994  178.360001  37.700001  305.149994  ...   \n",
       " \n",
       "             SLB Close   SO Close   SPG Close    T Close   TGT Close  \\\n",
       " Date                                                                  \n",
       " 2022-03-01  37.669998  64.099998  134.600006  17.771902  219.429993   \n",
       " 2022-03-02  39.240002  64.570000  138.770004  17.990936  224.899994   \n",
       " 2022-03-03  38.520000  66.400002  139.410004  18.058912  223.839996   \n",
       " 2022-03-04  38.939999  67.580002  136.889999  18.028702  224.100006   \n",
       " 2022-03-07  42.099998  69.230003  128.270004  17.802114  211.039993   \n",
       " ...               ...        ...         ...        ...         ...   \n",
       " 2022-11-18  53.439999  65.570000  117.900002  18.969999  162.880005   \n",
       " 2022-11-21  52.270000  65.730003  117.180000  18.840000  158.020004   \n",
       " 2022-11-22  53.639999  65.949997  119.379997  19.000000  157.860001   \n",
       " 2022-11-23  51.419998  66.360001  119.610001  19.090000  163.410004   \n",
       " 2022-11-25  50.830002  66.910004  120.699997  19.120001  163.380005   \n",
       " \n",
       "              TXN Close   UNH Close   UNP Close   UPS Close  USB Close  \n",
       " Date                                                                   \n",
       " 2022-03-01  167.289993  476.250000  242.429993  205.580002  53.860001  \n",
       " 2022-03-02  170.100006  485.380005  252.369995  211.460007  56.230000  \n",
       " 2022-03-03  171.000000  486.589996  255.460007  212.429993  56.310001  \n",
       " 2022-03-04  169.979996  498.649994  264.630005  210.389999  55.250000  \n",
       " 2022-03-07  164.889999  486.869995  261.459991  201.179993  53.099998  \n",
       " ...                ...         ...         ...         ...        ...  \n",
       " 2022-11-18  175.179993  530.000000  210.580002  178.970001  43.380001  \n",
       " 2022-11-21  172.399994  517.190002  212.270004  180.610001  43.389999  \n",
       " 2022-11-22  177.220001  523.090027  213.199997  182.740005  43.910000  \n",
       " 2022-11-23  178.979996  529.710022  212.520004  182.839996  44.110001  \n",
       " 2022-11-25  177.070007  537.619995  213.330002  182.520004  44.259998  \n",
       " \n",
       " [188 rows x 55 columns],\n",
       "             AAPL Daily Rate of Return  ABBV Daily Rate of Return  \\\n",
       " Date                                                               \n",
       " 2022-03-01                  -0.065065                   0.078896   \n",
       " 2022-03-02                   0.020588                   0.012729   \n",
       " 2022-03-03                  -0.001981                   0.005616   \n",
       " 2022-03-04                  -0.018408                   0.000997   \n",
       " 2022-03-07                  -0.023717                  -0.007372   \n",
       " ...                               ...                        ...   \n",
       " 2022-11-18                   0.003782                   0.018533   \n",
       " 2022-11-21                  -0.021680                   0.013744   \n",
       " 2022-11-22                   0.014661                   0.017058   \n",
       " 2022-11-23                   0.005926                  -0.002503   \n",
       " 2022-11-25                  -0.019594                   0.001443   \n",
       " \n",
       "             ABT Daily Rate of Return  ACN Daily Rate of Return  \\\n",
       " Date                                                             \n",
       " 2022-03-01                 -0.072886                 -0.119435   \n",
       " 2022-03-02                  0.018533                  0.022418   \n",
       " 2022-03-03                  0.005068                  0.001948   \n",
       " 2022-03-04                  0.003637                 -0.015018   \n",
       " 2022-03-07                 -0.021003                 -0.029093   \n",
       " ...                              ...                       ...   \n",
       " 2022-11-18                  0.012773                 -0.002229   \n",
       " 2022-11-21                  0.000096                  0.001815   \n",
       " 2022-11-22                  0.009530                  0.020452   \n",
       " 2022-11-23                  0.010966                  0.005599   \n",
       " 2022-11-25                  0.008866                  0.006349   \n",
       " \n",
       "             AIG Daily Rate of Return  AMZN Daily Rate of Return  \\\n",
       " Date                                                              \n",
       " 2022-03-01                  0.002424                   0.010486   \n",
       " 2022-03-02                  0.054413                   0.006024   \n",
       " 2022-03-03                 -0.010321                  -0.027320   \n",
       " 2022-03-04                 -0.048502                  -0.015264   \n",
       " 2022-03-07                 -0.048887                  -0.056220   \n",
       " ...                              ...                        ...   \n",
       " 2022-11-18                  0.006393                  -0.007485   \n",
       " 2022-11-21                  0.004848                  -0.017846   \n",
       " 2022-11-22                  0.012810                   0.008003   \n",
       " 2022-11-23                  0.001314                   0.009979   \n",
       " 2022-11-25                  0.001969                  -0.007649   \n",
       " \n",
       "             AXP Daily Rate of Return  BA Daily Rate of Return  \\\n",
       " Date                                                            \n",
       " 2022-03-01                 -0.009788                -0.026618   \n",
       " 2022-03-02                  0.012636                 0.014879   \n",
       " 2022-03-03                 -0.002329                -0.045296   \n",
       " 2022-03-04                 -0.038579                -0.042415   \n",
       " 2022-03-07                 -0.079907                -0.064532   \n",
       " ...                              ...                      ...   \n",
       " 2022-11-18                  0.012347                 0.006424   \n",
       " 2022-11-21                  0.002033                -0.005463   \n",
       " 2022-11-22                  0.011583                -0.002544   \n",
       " 2022-11-23                 -0.004205                 0.013623   \n",
       " 2022-11-25                  0.001429                 0.020074   \n",
       " \n",
       "             BAC Daily Rate of Return  BIIB Daily Rate of Return  ...  \\\n",
       " Date                                                             ...   \n",
       " 2022-03-01                 -0.079540                  -0.069292  ...   \n",
       " 2022-03-02                  0.016247                  -0.012123  ...   \n",
       " 2022-03-03                 -0.010710                   0.016555  ...   \n",
       " 2022-03-04                 -0.036244                  -0.008427  ...   \n",
       " 2022-03-07                 -0.063736                  -0.017522  ...   \n",
       " ...                              ...                        ...  ...   \n",
       " 2022-11-18                  0.000538                   0.002781  ...   \n",
       " 2022-11-21                  0.003227                  -0.004160  ...   \n",
       " 2022-11-22                  0.004824                   0.016875  ...   \n",
       " 2022-11-23                  0.003201                  -0.010661  ...   \n",
       " 2022-11-25                  0.002393                   0.005602  ...   \n",
       " \n",
       "             SLB Daily Rate of Return  SO Daily Rate of Return  \\\n",
       " Date                                                            \n",
       " 2022-03-01                 -0.032831                -0.068072   \n",
       " 2022-03-02                  0.041678                 0.007332   \n",
       " 2022-03-03                 -0.018349                 0.028341   \n",
       " 2022-03-04                  0.010903                 0.017771   \n",
       " 2022-03-07                  0.081150                 0.024416   \n",
       " ...                              ...                      ...   \n",
       " 2022-11-18                  0.011546                 0.010012   \n",
       " 2022-11-21                 -0.021894                 0.002440   \n",
       " 2022-11-22                  0.026210                 0.003347   \n",
       " 2022-11-23                 -0.041387                 0.006217   \n",
       " 2022-11-25                 -0.011474                 0.008288   \n",
       " \n",
       "             SPG Daily Rate of Return  T Daily Rate of Return  \\\n",
       " Date                                                           \n",
       " 2022-03-01                 -0.085598               -0.077255   \n",
       " 2022-03-02                  0.030981                0.012325   \n",
       " 2022-03-03                  0.004612                0.003778   \n",
       " 2022-03-04                 -0.018076               -0.001673   \n",
       " 2022-03-07                 -0.062970               -0.012568   \n",
       " ...                              ...                     ...   \n",
       " 2022-11-18                  0.018223                0.001055   \n",
       " 2022-11-21                 -0.006107               -0.006853   \n",
       " 2022-11-22                  0.018775                0.008493   \n",
       " 2022-11-23                  0.001927                0.004737   \n",
       " 2022-11-25                  0.009113                0.001572   \n",
       " \n",
       "             TGT Daily Rate of Return  TXN Daily Rate of Return  \\\n",
       " Date                                                             \n",
       " 2022-03-01                 -0.000222                 -0.067970   \n",
       " 2022-03-02                  0.024928                  0.016797   \n",
       " 2022-03-03                 -0.004713                  0.005291   \n",
       " 2022-03-04                  0.001162                 -0.005965   \n",
       " 2022-03-07                 -0.058278                 -0.029945   \n",
       " ...                              ...                       ...   \n",
       " 2022-11-18                  0.005370                 -0.001027   \n",
       " 2022-11-21                 -0.029838                 -0.015869   \n",
       " 2022-11-22                 -0.001013                  0.027958   \n",
       " 2022-11-23                  0.035158                  0.009931   \n",
       " 2022-11-25                 -0.000184                 -0.010672   \n",
       " \n",
       "             UNH Daily Rate of Return  UNP Daily Rate of Return  \\\n",
       " Date                                                             \n",
       " 2022-03-01                  0.007787                 -0.003813   \n",
       " 2022-03-02                  0.019171                  0.041002   \n",
       " 2022-03-03                  0.002493                  0.012244   \n",
       " 2022-03-04                  0.024785                  0.035896   \n",
       " 2022-03-07                 -0.023624                 -0.011979   \n",
       " ...                              ...                       ...   \n",
       " 2022-11-18                  0.028507                  0.003622   \n",
       " 2022-11-21                 -0.024170                  0.008025   \n",
       " 2022-11-22                  0.011408                  0.004381   \n",
       " 2022-11-23                  0.012656                 -0.003189   \n",
       " 2022-11-25                  0.014933                  0.003811   \n",
       " \n",
       "             UPS Daily Rate of Return  USB Daily Rate of Return  \n",
       " Date                                                            \n",
       " 2022-03-01                  0.024053                 -0.074411  \n",
       " 2022-03-02                  0.028602                  0.044003  \n",
       " 2022-03-03                  0.004587                  0.001423  \n",
       " 2022-03-04                 -0.009603                 -0.018824  \n",
       " 2022-03-07                 -0.043776                 -0.038914  \n",
       " ...                              ...                       ...  \n",
       " 2022-11-18                  0.016528                  0.014262  \n",
       " 2022-11-21                  0.009164                  0.000230  \n",
       " 2022-11-22                  0.011793                  0.011984  \n",
       " 2022-11-23                  0.000547                  0.004555  \n",
       " 2022-11-25                 -0.001750                  0.003401  \n",
       " \n",
       " [188 rows x 55 columns])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def filter_tickers(tickers, start_date, end_date):\n",
    "    #Empty structures to be used later\n",
    "    close_price_df = pd.DataFrame()\n",
    "    daily_ror_df = pd.DataFrame()\n",
    "    filtered_tickers = []\n",
    "    \n",
    "    #For each stock in the ticker_list we will determine whether or not it is compatitble with our filtration criteria\n",
    "    for ticker in tickers:\n",
    "        \n",
    "        #Check for empty lines and duplicates\n",
    "        if ticker == '' or ticker in filtered_tickers:\n",
    "            print(f'{ticker} does not exist or is already accounted for')\n",
    "            continue\n",
    "            \n",
    "        ##Get company stock history from yfinance\n",
    "        company_data = yf.Ticker(ticker)\n",
    "        company_fin_hist = company_data.history(start=start_date, end=end_date)\n",
    "        \n",
    "        #Remove vetoed months from the stock history DataFrame (these vetoed months are the same for all stocks in the us market).\n",
    "        # Since stocks in the US market will have the same trading days. Whether or not vetoed months are missed or added\n",
    "        # for stocks in other markets is irrelevant as they will be filtered out anyways (since they are not part of the US market)\n",
    "        for month in vetoed_months:\n",
    "            company_fin_hist = company_fin_hist.drop((company_fin_hist.loc[f'{month}-01':f'{month}-28']).index)\n",
    "        #Calculate average monthly volume for non-vetoed months \n",
    "        average_monthly_volume = ((company_fin_hist[company_fin_hist.index <= '2022-10-31']).Volume.sum())/(10 - len(vetoed_months))\n",
    "\n",
    "        #If the average_monthly_volume < 200000 shares and the stock operates in the us_market it is removed\n",
    "        #from consideration as we move onto the next iteration without storing any of this stocks data\n",
    "        if  average_monthly_volume < 200000:\n",
    "            print(f'{ticker} does not currently exist or does not have sufficient trading volume for consideration')\n",
    "            continue\n",
    "            \n",
    "        #Get the stock information and check if or if not it is in the us market\n",
    "        company_info = company_data.info\n",
    "        if 'market' in company_info.keys() and company_info['market'] == 'us_market':\n",
    "            \n",
    "            #For stocks that pass the filter check: Add tickers to a filtered_ticker_list\n",
    "            #                                       Append their close prices as a column to the Close price dataframe\n",
    "            #                                       Append their daily rates of return as a column to the daily_ror_df\n",
    "            filtered_tickers.append(ticker)\n",
    "            close_price_df[f'{ticker} Close'] = company_fin_hist.Close\n",
    "            daily_ror_df[f'{ticker} Daily Rate of Return'] = company_fin_hist.Close.pct_change()\n",
    "        else:\n",
    "            #Not valid us stock, move to next iteration\n",
    "            print(f'{ticker} is not a valid stock listed in the American market')\n",
    "            continue\n",
    "        \n",
    "    #We will return the filtered tickers list and data from March 1, 2022, onweards for analysis from the daily_ror_df and close_price_df\n",
    "    #Since our analysis starts from March 1, 2022 we don not have to worry about the data dropped from February 2022 (when there was less than 20 trading days)\n",
    "    return (filtered_tickers, close_price_df[close_price_df.index >= '2022-03-01'], (daily_ror_df[daily_ror_df.index >= '2022-03-01']).dropna())\n",
    "filtered_fin_info = filter_tickers(tickers_list, '2022-01-01', '2022-11-26')\n",
    "filtered_fin_info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "RRqEwOmHA_4k"
   },
   "outputs": [],
   "source": [
    "filtered_tickers_list = filtered_fin_info[0]\n",
    "filtered_close_price_df = filtered_fin_info[1]\n",
    "filtered_ror_df = filtered_fin_info[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "d8wjtHPW-HHL"
   },
   "source": [
    "# Strategy: Min-Maxing\n",
    "\n",
    "In assignment 3, through diversification using different stocks from the same or different industries, we found that no matter how correlated or risky the assets we were working with (e.g. BTC and ETH), the standard deviation of our portfolio relative to our starting value was always lower than that of the riskiest stock in the portfolio. From this, we can formulate a strategy where we decrease diversification as much as possible, by putting as much of our money into one risky stock as possible, we can ensure that we have the highest variance possible.\n",
    "\n",
    "Here is our strategy to assembling a portfolio:\n",
    "\n",
    "### Step 1: Find a \"Hero\" Stock\n",
    "\n",
    "Our portfolios are centralized around the one stock that we deem the most volatile. By putting as much money into the most volatile stock we receive, we can decrease the effects of diversification in any way and get a portfolio variance value as close to the \"hero\" stock as possible. We used a number of criteriafor finding a hero stock, and ran simulations to determine which criterion is the best for hero stocks.\n",
    "\n",
    "### Step 2: Find the 11 Most Correlated Stocks\n",
    "\n",
    "To reduce the amount of clashing movements between stocks in the final portfolio, we chose the 11 stocks that correlated most with the \"hero\" stock, so that the likelihood the stocks follow the same movements is higher. There are a few reasons for why we chose the rest of the portfolio this way:\n",
    "- We would rather choose the minimum amount of stocks that correlate most with our hero stock, since the correlation of any other stocks we choose would be lower than any stock that we have already chosen, and would be a worse option than just investing more into stocks that correlate the most with our hero.\n",
    "- Rather than the stocks with the highest/lowest beta or standard deviation, we chose to support our hero stock with the most correlated stocks because of the potential of volatile stocks clashing with each other. We would rather have a slightly less volatile stock that correlates with our risky stock the best.\n",
    "\n",
    "### Step 3: Assigning Weights\n",
    "\n",
    "We find our weights in the following way: we first assign as much as possible into the hero stock (25%), invest the minimum into the other 11 stocks, then with the remaining funds, invest as much as possible into the most correlated stocks. From doing this, we find we invest 25% into our \"hero\" stock, 25% into the most correlated stock, 12.5% into the second most correlated stock, and $\\frac{100}{2\\cdot 12}\\%$ into each remaining stock.\n",
    "\n",
    "Steps will be explained more in depth once we reach them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TJjVK5ASPDfs"
   },
   "source": [
    "## Measures of Stock Suitability\n",
    "\n",
    "Here are the measures we used to determine the \"hero\" stocks our portfolios centered around:\n",
    "\n",
    "### Standard Deviation\n",
    "\n",
    "Standard Deviation is a measure of how much a set of data deviates from its mean. In this case, we found the standard deviation of the rate of return of each valid stock, then found the stock with the greatest value.\n",
    "\n",
    "Here is the standard deviation equation:\n",
    "\n",
    "\\begin{align*}\n",
    "\\sigma=\\sqrt{\\frac{\\sum(x_i-\\overline{X})^2}{N}}\n",
    "\\end{align*}\n",
    "\n",
    "Since we are working towards a risky portfolio, we want stocks with a high standard deviation. This means we are choosing more volatile stocks that increases the chance of fluctuating prices. To calculate for standard deviation in our list of tickers, we create a function called standard_deviation that takes in the filtered list of tickers as well as their corresponding daily rate of returns. Then, we use a for loop that iterates through the rate of returns and calculates the standard deviation for each ticker. It then appends these standard deviations to a new list. After that, we plotted all the standard deviations on a graph. Then, since we are looking for \"hero\" stocks, we made a function to select the ticker that produced the highest standard deviation, which would be one of our \"hero\" stocks.\n",
    "\n",
    "A disadvantage of measuring standard deviation is it de-emphasizes drops in return. For example, a stock that increased by 25% then fell by 20% would have its starting value. As such, we decided to also test another measure:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "-SYznUH3A_4k"
   },
   "outputs": [],
   "source": [
    "def standard_deviation(tickers, fin_info_df):\n",
    "    standard_deviation_list = []\n",
    "    for tick in tickers:\n",
    "        standard_dev = fin_info_df[f'{tick} Daily Rate of Return'].std()\n",
    "        standard_deviation_list.append(standard_dev)\n",
    "    return standard_deviation_list\n",
    "list_of_stdevs = standard_deviation(filtered_tickers_list, filtered_ror_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 217
    },
    "id": "YbwZjndF3MeQ",
    "outputId": "47d04535-a33b-4dab-d224-629206c1982f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'PYPL'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def stdev_max(tickers, stdevs):\n",
    "    max_stdev = max(stdevs)\n",
    "    return (tickers[stdevs.index(max_stdev)], max_stdev)\n",
    "max_deviation_stock = stdev_max(filtered_tickers_list, list_of_stdevs)[0]\n",
    "max_deviation_stock"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ym8rtZGc_BBB"
   },
   "source": [
    "### Beta\n",
    "\n",
    "Beta is a measure of a stock's correlation with general market movements. It is calculated with the following equation:\n",
    "\n",
    "\\begin{align*}\n",
    "\\beta=\\frac{COV(x_i,r_M)}{\\sigma^2(r_M)}\n",
    "\\end{align*}\n",
    "\n",
    "Where $x_i$ represents a stock's returns, $r_M$ represents market returns, the denominator represents the market variance, and the numerator represents the covariance between stock returns and market returns.\n",
    "\n",
    "As an example of what Beta represents, a stock with a beta of $1.5$ should expect to increase $3\\%$ when the market moves $2\\%$.\n",
    "\n",
    "Because of the way Beta is calculated, we find that the higher the magnitude of the beta of a stock, the more volatile it is. As such, we use this measure to get two hero stocks; the stock with the highest and lowest beta."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "-UGaLBFaNiQz"
   },
   "outputs": [],
   "source": [
    "# Set Dates\n",
    "start_date = '2022-01-01'\n",
    "end_date = '2022-11-01'\n",
    "\n",
    "# I decided to calculate the market betas relative to the ITOT ETF, since it is well maintained\n",
    "# and regarded as a trustworthy indicator of total US market performance (including small-cap and\n",
    "# mid cap companies).\n",
    "market = yf.Ticker('ITOT') # Blackrock's total market etf, listed under their iShares umbrella of products\n",
    "#market = yf.Ticker('SPY')\n",
    "#market = yf.Ticker('VTSAX') (Vanguard's total us market etf)\n",
    "market_close = market.history(start = start_date, end = end_date)['Close']\n",
    "\n",
    "def stock_beta(stock_close):\n",
    "    '''\n",
    "    Reads in a series of closing prices from the set start_date and end_date of a stock and the \n",
    "    market and calculates the market beta.\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    # Reading in the prices into a central DataFrame\n",
    "    returns = pd.DataFrame()\n",
    "    returns['market'] = market_close\n",
    "    returns = returns.pct_change()\n",
    "    returns = returns.dropna()\n",
    "    returns['stock'] = stock_close\n",
    "    \n",
    "    # Calculating covariance and market variance\n",
    "    market_var = returns['market'].var()\n",
    "    stock_cov = returns.cov().loc['stock', 'market']\n",
    "    \n",
    "    return stock_cov / market_var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "8j7XVGfkNkxQ",
    "outputId": "1b0168ae-ef38-4510-ac03-3c82074fcaf9"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beta</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tickers</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AAPL</th>\n",
       "      <td>1.313093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ABBV</th>\n",
       "      <td>0.332808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ABT</th>\n",
       "      <td>0.872481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ACN</th>\n",
       "      <td>1.213432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AIG</th>\n",
       "      <td>1.081465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AMZN</th>\n",
       "      <td>1.633478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AXP</th>\n",
       "      <td>1.234780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BA</th>\n",
       "      <td>1.423475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BAC</th>\n",
       "      <td>1.088499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIIB</th>\n",
       "      <td>1.068339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BK</th>\n",
       "      <td>1.031787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BLK</th>\n",
       "      <td>1.383136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMY</th>\n",
       "      <td>0.290470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>1.073460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAT</th>\n",
       "      <td>0.925479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CL</th>\n",
       "      <td>0.444047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CMCSA</th>\n",
       "      <td>0.753692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COF</th>\n",
       "      <td>1.352625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COP</th>\n",
       "      <td>0.711824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COST</th>\n",
       "      <td>0.935784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CSCO</th>\n",
       "      <td>0.882120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CVS</th>\n",
       "      <td>0.687138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GM</th>\n",
       "      <td>1.566399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GOOG</th>\n",
       "      <td>1.330705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>JPM</th>\n",
       "      <td>1.003613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KMI</th>\n",
       "      <td>0.658693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KO</th>\n",
       "      <td>0.511733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LLY</th>\n",
       "      <td>0.543847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LMT</th>\n",
       "      <td>0.292543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO</th>\n",
       "      <td>0.415470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MON</th>\n",
       "      <td>0.010952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MRK</th>\n",
       "      <td>0.339041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MS</th>\n",
       "      <td>1.175123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MSFT</th>\n",
       "      <td>1.280571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NEE</th>\n",
       "      <td>0.721823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NKE</th>\n",
       "      <td>1.454560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ORCL</th>\n",
       "      <td>0.972758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OXY</th>\n",
       "      <td>0.756253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PEP</th>\n",
       "      <td>0.563606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PFE</th>\n",
       "      <td>0.597965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PG</th>\n",
       "      <td>0.519238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PM</th>\n",
       "      <td>0.484358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PYPL</th>\n",
       "      <td>1.900055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QCOM</th>\n",
       "      <td>1.437966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SBUX</th>\n",
       "      <td>1.224226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SLB</th>\n",
       "      <td>0.748947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SO</th>\n",
       "      <td>0.449823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SPG</th>\n",
       "      <td>1.124454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T</th>\n",
       "      <td>0.557815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TGT</th>\n",
       "      <td>1.266344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TXN</th>\n",
       "      <td>1.082799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNH</th>\n",
       "      <td>0.608109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNP</th>\n",
       "      <td>0.702654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UPS</th>\n",
       "      <td>0.855358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>USB</th>\n",
       "      <td>0.808310</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             beta\n",
       "tickers          \n",
       "AAPL     1.313093\n",
       "ABBV     0.332808\n",
       "ABT      0.872481\n",
       "ACN      1.213432\n",
       "AIG      1.081465\n",
       "AMZN     1.633478\n",
       "AXP      1.234780\n",
       "BA       1.423475\n",
       "BAC      1.088499\n",
       "BIIB     1.068339\n",
       "BK       1.031787\n",
       "BLK      1.383136\n",
       "BMY      0.290470\n",
       "C        1.073460\n",
       "CAT      0.925479\n",
       "CL       0.444047\n",
       "CMCSA    0.753692\n",
       "COF      1.352625\n",
       "COP      0.711824\n",
       "COST     0.935784\n",
       "CSCO     0.882120\n",
       "CVS      0.687138\n",
       "GM       1.566399\n",
       "GOOG     1.330705\n",
       "JPM      1.003613\n",
       "KMI      0.658693\n",
       "KO       0.511733\n",
       "LLY      0.543847\n",
       "LMT      0.292543\n",
       "MO       0.415470\n",
       "MON      0.010952\n",
       "MRK      0.339041\n",
       "MS       1.175123\n",
       "MSFT     1.280571\n",
       "NEE      0.721823\n",
       "NKE      1.454560\n",
       "ORCL     0.972758\n",
       "OXY      0.756253\n",
       "PEP      0.563606\n",
       "PFE      0.597965\n",
       "PG       0.519238\n",
       "PM       0.484358\n",
       "PYPL     1.900055\n",
       "QCOM     1.437966\n",
       "SBUX     1.224226\n",
       "SLB      0.748947\n",
       "SO       0.449823\n",
       "SPG      1.124454\n",
       "T        0.557815\n",
       "TGT      1.266344\n",
       "TXN      1.082799\n",
       "UNH      0.608109\n",
       "UNP      0.702654\n",
       "UPS      0.855358\n",
       "USB      0.808310"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Returns the Betas of Every Stock in a Daily Rate of Return DataFrame\n",
    "def generate_stock_betas(ror_df):\n",
    "    # Creating a running count of tickers and their betas\n",
    "    tickers = []\n",
    "    beta = []\n",
    "\n",
    "    # iterating through the tickers in a rate-of-return dataframe\n",
    "    for ticker in ror_df.columns:\n",
    "        ticker_name = ticker[0 : -len(' Daily Rate of Return')]\n",
    "        tickers = tickers + [ticker_name]\n",
    "        beta = beta + [stock_beta(ror_df[ticker])]\n",
    "\n",
    "    # Creating a dictionary with tickers as keys and betas as values\n",
    "    beta_dic = {'tickers' : tickers, 'beta' : beta}\n",
    "    beta_pf = pd.DataFrame(beta_dic)\n",
    "    beta_pf = beta_pf.set_index('tickers')\n",
    "    return beta_pf\n",
    "stock_beta_df = generate_stock_betas(filtered_ror_df)\n",
    "stock_beta_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "Oys1Unj4NnUq"
   },
   "outputs": [],
   "source": [
    "def beta_min_max(beta_list):\n",
    "    ''' \n",
    "        Note: Consumes a series.\n",
    "    '''\n",
    "    sorted_beta_list = beta_list.sort_values()\n",
    "    return ((sorted_beta_list.index[0], sorted_beta_list[0]), (sorted_beta_list.index[-1], sorted_beta_list[-1]))\n",
    "max_beta_stock = beta_min_max(stock_beta_df['beta'])[1][0]\n",
    "min_beta_stock = beta_min_max(stock_beta_df['beta'])[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "aJwGXmaC3JKg"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def graph_betas(max_beta, min_beta):\n",
    "    max_beta_init_value = filtered_close_price_df[f'{max_beta_stock} Close'][0]\n",
    "    min_beta_init_value = filtered_close_price_df[f'{min_beta_stock} Close'][0]\n",
    "    plt.figure(figsize = (20,15))\n",
    "    plt.plot(filtered_close_price_df[f'{max_beta_stock} Close'] * 100 / max_beta_init_value)\n",
    "    plt.plot(filtered_close_price_df[f'{min_beta_stock} Close'] * 100 / min_beta_init_value)\n",
    "    plt.title('Close Price Between the Stock With Highest Beta vs Lowest Beta') \n",
    "    plt.xlabel('Stock Ticker') \n",
    "    plt.ylabel('Close Prices')\n",
    "    plt.xticks(rotation=70)\n",
    "    \n",
    "    #Displaying the plot\n",
    "    plt.show()\n",
    "graph_betas(max_beta_stock, min_beta_stock)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ns-Zgm8mPLJo"
   },
   "source": [
    "### Correlation\n",
    "Since we are looking at a risky portfolio, we want positively correlated stocks to make sure we obtain stocks that move in the same direction relative to the market. As mentioned before, correlation would help us find tickers that move in the same direction as our \"hero\" ticker, thus creating a portfolio that is more risky. The formula for correlation is:\n",
    "\n",
    "\\begin{align*}\n",
    "COR(X,Y)=\\frac{COV(X,Y)}{\\sigma_X \\times \\sigma_Y}\n",
    "\\end{align*}\n",
    "\n",
    "To calculate for correlation, we created a function that takes in the hero stock and the dataframe of rate of returns. Since we want stocks that are very correlated with one another, the function returns 11 other stocks that have a correlation closest to 1 when compared with the \"hero\" stock. We then plotted a scatterplot of the correlation between the daily rate of returns of the \"hero\" stock and the returns of the stock that is the most correlated to that stock. The addition of a linear line of best fit shows the linear correlation between the two stocks. \n",
    "\n",
    "This is also known as Pearson's Correlation Coefficient."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "id": "bJhSe_60_iHj"
   },
   "outputs": [],
   "source": [
    "def correlation(stock_ror, fin_ror_df):\n",
    "    corr_list = []\n",
    "    stock_list = []\n",
    "    for tick in fin_ror_df:\n",
    "        corr = fin_ror_df[tick].corr(stock_ror, method = 'pearson')\n",
    "        corr_list.append(corr)\n",
    "        tick_abrv = tick[0 : -len(' Daily Rate of Return')]\n",
    "        stock_list.append(tick_abrv)\n",
    "    corr_df = pd.DataFrame({'ticker' : stock_list, 'corr. with stock' : corr_list})\n",
    "    corr_df = corr_df.set_index('ticker')\n",
    "    return corr_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "id": "lFzFCWzzA_4l"
   },
   "outputs": [],
   "source": [
    "def find_corr_stocks(hero_stock, stocks_ror_df):\n",
    "    corr_df = correlation(stocks_ror_df[f'{hero_stock} Daily Rate of Return'], stocks_ror_df)\n",
    "    corr_df = corr_df.sort_values(['corr. with stock'])\n",
    "    return corr_df.index[-12:-1]\n",
    "max_gain_portfolio = find_corr_stocks(max_beta_stock, filtered_ror_df)\n",
    "max_loss_portfolio = find_corr_stocks(min_beta_stock, filtered_ror_df)\n",
    "max_deviation_portfolio = find_corr_stocks(max_deviation_stock, filtered_ror_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "id": "_CcFzoQl2nmT"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABJ4AAAN9CAYAAADSZLNIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAACjY0lEQVR4nOzdd3hT5fvH8c/TUiAMKQgoVFFUBFFUBEXFvVBcFffWr6MMcVfBBYgKiooiKu7xcw+syCoIioo4ikURBUFFoYCyyizQ8fz+SBpLSdK0zcnJeL+uqxeck5PkTtKq/Xg/92OstQIAAAAAAAAiLcXtAgAAAAAAAJCYCJ4AAAAAAADgCIInAAAAAAAAOILgCQAAAAAAAI4geAIAAAAAAIAjCJ4AAAAAAADgCIInAACixBhzlTHmq1rcf5Ix5spI1uR73FeNMQ9E+nERXcaYwcaYN9yuI5kYY44zxiyN4vNZY8w+0Xq+IDV8boy51s0aAADxheAJAJBUjDGXGGPyjDEbjTHLfWHOUW7XVVmgEMFae5q19jW3agokHkKrQL8oRzMwMMakG2NeNsasMMZsMMb8Zoy5s8LtrocJNeF7D60xZmyl8wf5zn9ey8cPK6g1xvQwxnzhe29XGmNmGGPOqs1zO6G2wXMYj7+/MWaKMWatMabQGDPbGNPTd1tUAzIAACoieAIAJA1jzK2SnpD0kKRdJLWR9Iyks2vwWHXCOYfEU4PPeaSkRpL2k9RE0lmSfo90XS5ZKelIY8zOFc5dKem3aDy5MeY8Se9Lel3SbvL+XN8n6cwaPFa8/0x/ImmqvO9BS0k3SlrvakUAAIjgCQCQJIwxTSTdL6mftXastXaTtbbYWvuJtTbbd009Y8wTxphlvq8njDH1fLcdZ4xZaoy50xizQtIrvq6kD4wxbxhj1ku6yhjTxBjzkq+bqsAY84AxJjVITU8aY5YYY9b7uhOO9p0/VdJdki70dWb96Dvv79wxxqQYY+4xxvxljPnXGPO67zXKGLOnr+PkSmPM38aYVcaYu6t4i5obY6b6ukZmGGP2qFBnB99ta4wxC4wxF/jOXy/pUkl3+Or8xBhztTHmkwr3XWSMea/C8RJjzMGhHrfCZ/Gor/5/jDFjjDGeSp/Fbb7XvtwYc3VV3wOhhPrcfJ0qM40xI40xayQN9l3/uq/D5i/fZxHsv6sOlfSWtXattbbMWjvfWvuB77G/8F3zo+89vNB3/jrfe7fGGDPOGNO6Qq37V3jf/jHG3BXg9aQZY942xnxojKlb6bbDjbf7KrXCuXOMMT/5/n6Y8XYFrvc9/uMh3rptknIkXeS7b6qkCyS9Wek5jzTGfG+MWef788gKt11ljPnD9733pzHmUmPMfpLGSDrC974UBniNRtLjkoZaa1+01q7zvb8zrLXX+a4J5+fkGmPM35KmB/msg34vBqhpgDHmd99r+cUYc47vfMDXU9VjG2Oyfd+Ty4wx/wv2IRhjmktqK+kFa+0239dMa+1XxpiGkiZJau177o3GmNYmxD/vfI95tjFmju/74Hfj/edS5edtZYz5yRhze7DaAAAgeAIAJIsjJNWX9FGIa+6WdLikgyUdJOkwSfdUuH1XSc0k7SHpet+5syV9ICld3l+2X5NUImkfSZ0lnSIp2DyU733P1UzSW5LeN8bUt9ZOlrcr611rbSNr7UEB7nuV7+t4SXvJ21EzutI1R0lqL+lESff5fvkN5lJJQyU1lzTH91rk+6V1qq++lpIulvSMMWZ/a+3zvuse8dV5pqQZko72/cLfSlKapO6+xyqv86dQj+ur52FJ+/ren30kZcjbyVJuV3m7hzIkXSPpaWNM0xCvrypVfW7dJP3hq/VBSU/5nn8vScdKukJSsPDrG0kPGm8o167iDdbaY3x/Pcj3Hr5rjDlB0jB5A5xWkv6S9I4kGWMaS/pU0mRJrX31Tqv4mL7gIkfSVkkXWGu3VXrObyRtknRChdOXyPtZSNKTkp601u4kaW9J7ym0132vX5J6SJonaVmFeppJmiBplKSd5Q2LJhhjdvZ9H4ySdJq1trGkIyXNsdb+Kqm3pFm+9yU9wPO2l7S7vD9/wVylqn9OjpW3G62H77jyZ13V92JFv0s6Wt7vjSGS3jDGtArxeoI+ti/ouV3SyZLaSTopxOtcLWmR7/kyjTG7lN9grd0k6TRJy3zP3chau0wh/nlnjDlM3s81W95/th0jaXHFJzTG7Cnvz/toa+2jIWoDACQ7ay1ffPHFF198JfyXvMHKiiqu+V1SzwrHPSQt9v39OHm7O+pXuH2wpC8qHO8i7y/7ngrnLpb0me/vV0n6KsTzr5U3gCh/7Dcq3f65pGt9f58mqW+F29pLKpZUR9Kekqyk3Src/p2ki4I876uS3qlw3EhSqby/1F8o6ctK1z8naVCF+z5Q6fYlkg6Rtwvmed9zd5A3mBnnuybo40oy8gYje1e47QhJf1b4LIok1alw+7+SDg/y+j6XtFlSYYWvjZKWVuNz+7vCbam+6ztWOJcl6fMgz++Rt4Nttu8zWiRv0FJ+u5W0T4Xjl+QN8yp+HsW+z/ViSflBnmewpHHyhgGjJJkQ32sPSHrZ9/fGvvd7D9/xF/KGJs2r+Hk5rsJ7uFDe78F35P1Zu7b8/ZB0uaTvKt13lu99bej7PM6t+P6H+fPS3ffe1Q9xTTg/J3tVes6Kn3U434tLQzz/HElnB3o9YTz2y5KGV7ht38rfK5Weazd5Q7XfJZX5Psd2wepU6H/ePSdpZIifp8flDaIuDvU9whdffPHFF1/WWjqeAABJY7W8y8lCzWxpLW93Sbm/fOfKrbTWbql0nyUV/r6HvB0+y413uG+hvL/AtQz0ZMa7VOxX3/KjQnm7JJqH82KC1FpH3hCl3IoKf98sb4ARjP91WGs3Slrje449JHUrfz2+Oi+Vt+MomBny/qJ7jO/vn8vbVXKs71hVPG4LSQ0kza5w22Tf+XKrrbUl1Xh9N1pr08u/JJ1R4bZwPreKn3NzSXW14/ufEeiJrbVF1tqHrLVd5O34eU/e7rZmQWrd7rP1fR6rfY+/u0LPhzpc0oHyBhY2xHVvSerlW1rVS9IP1try57xG3pBjvm9Z3BnBHqSC/5N0g7ydRZW7Cit/r8p3nGG93TgXytsNtNwYM8EY0yGM55O874nk7QoLJpyfkyXaXsXjcL4X/YwxV/iWp5Vfe4CC/0xX9ditK9VS+T3cjrV2qbX2Bmvt3vJ+T2+St2spmFD/vKvq++xSSQUK3W0GAIAkltoBAJLHLElbJGWGuGaZvL+wlWujCkuG5O02qKziuSXydsI0rxBy7GSt3b/ynYx3ntOd8i6nauoLQ9bJ2wUR7LmqqrVE0j9V3C+Y3SvU1kje5X/L5H1NMyqGNta7VKdPiDrLg6ejfX+foR2Dp1CPu0rejqb9K9zWxFobKliqjXA+t4qvc5W8XTOV3/+Cqp7IWrte3mWUDeWdyRPIdp+tbznazr7HXyLv8rdgpsi7TG9axeVWAer4Rd6g4TRtv8xO1tqF1tqL5Q3eHpb0ga+GUP5PUl9JE621m0O9Hh//+2WtzbXWnixvgDRf0gvlpVTxnAvkfT/ODXFNOD8nlZ+n8mcd1vei8c5Fe0HeAG5n38/0zwr+M13VYy9XhZ9LX+1hsdYukfS0vMFXoOeWQv/zrqrvs8G++t8yQWbYAQBQjuAJAJAUrLXr5J2d8rRvBkoD4x3AfJox5hHfZW9LuscY08I3rPc+SW9U4zmWy/uL/2PGmJ18c472NsYcG+DyxvL+ArxSUh1jzH2Sdqpw+z+S9jTBB1a/LekWY0xbX1BUPhOqJMj1VelpjDnKeAdRD5X0re+X1/GS9jXGXO57v9KMMYdWmBf1j7yzcyqaIW/ni8dau1TSl5JOlTc8yfddE/RxrbVl8v4CP9IY01KSjDEZxpgeckA1PzdZa0vl7Vp60BjT2Bc43Kog3yvGmHt9r62uMaa+pJvkXV62wHdJ5ffwLUlXG2MO9nUkPSTv57FY3vdtV2PMzb7h0I2NMd0q1feI7zGm+b6Pg3lL3p3PjpF3Z7jyei8zxrTwfQ6FvtOlIR5H1to/5Q0WAw2xnyjvZ32JMaaO8Q5Q7yhpvDFmF2PMWb5ga6u8SyDLn+sfSbuZSsPRKzynlfd9v9c3P6v8szvKGPO877Ja/ZxU83uxobwBz0rfdVfrv+Bnh9cTxmO/J++GBR2NMQ3kXYYakDGmqTFmiDFmH9970FzS/+SdL1b+3Dsb32D1Cu9NsH/evSTv9+CJvsfLqNSJVizpfN9r/r8Q/5wCAIDgCQCQPKy1j8v7i+o98v5yuETe7oQc3yUPSMqT9JOkuZJ+8J2rjivkXYb1i7wzmz5Q4KVAufLuNPWbvJ0nW7T9spryIGC1MeaHAPd/Wd4uky8k/em7f/9q1lrRW/L+YrtGUhd5l9LIWrtB3kHbF8nbDbFC3i6Y8t2vXpLU0bdUKMd3n9/kDRC+9B2vl3dY80xfaBPO494p7yykb4x3x8BP5Z3P45RwP7dy/eVdyvSHpK/kff9eDnKtlfSKvB0iy+QdFn26bwmd5O0eec33Hl5grZ0m6V5JH8rb9bK3fLvG+d63kyWdKe97tlDekG/7J7R2qLzf15+GWNL3trydadOttasqnD9V0jxjzEZ5B41fFGCJ6Y4v0tqvrHdodeXzq+Vd2nibvMvj7pB0hu85U3znl8n7vXesvJ1TkjRd3kHlK4wxqyo/ru+xP5B3qd7/fI/xj7w/sx/7LonEz0lY34u+LrLH5O2u/EdSJ0kzK1wS6PUEfWxr7SRJT/jut8j3ZzDb5J1Z9amk9fJ2Wm2Vd66UrLXz5f28//B9n7VWiH/eWWu/k3cm20h5OzFnqFLXmvUOre8lb2fcy4RPAIBgTOjl/wAAAAAAAEDN8H8mAAAAAAAA4AiCJwAAAAAAADiC4AkAAAAAAACOIHgCAAAAAACAIwieAAAAAAAA4Ig6bhcQTc2bN7d77rmn22UAAAAAAAAkjNmzZ6+y1rYIdFtSBU977rmn8vLy3C4DAAAAAAAgYRhj/gp2G0vtAAAAAAAA4AiCJwAAAAAAADiC4AkAAAAAAACOIHgCAAAAAACAIwieAAAAAAAA4AiCJwAAAAAAADiC4AkAAAAAAACOIHgCAAAAAACAIwieAAAAAAAA4AiCJwAAAAAAADiC4AkAAAAAAACOIHgCAAAAAACAIwieAAAAAAAA4AiCJwAAAAAAADiC4AkAAAAAAACOIHgCAAAAAACAIwieAAAAAAAA4AiCJwAAAAAAADiC4AkAAAAAAACOIHgCAAAAAACAIwieAAAAAAAA4AiCJwAAAAAAADiC4AkAAAAAAACOIHgCAAAAAACAIwieAAAAAAAA4AiCJwAAAAAAADiC4AkAAAAAAACOIHgCAAAAAACAIwieAAAAAAAA4AiCJwAAAAAAADiC4AkAAAAAAACOIHgCAAAAAACAI+q4XQAAAAAAAIATcvILNCJ3gZYVFql1ukfZPdors3OG22UlFYInAAAAAACQcHLyCzRw7FwVFZdKkgoKizRw7FxJInyKIpbaAQAAAACAhDMid4E/dCpXVFyqEbkLXKooORE8AQAAAACAhLOssKha5+EMgicAAAAAAJBwWqd7qnUeziB4AgAAAAAACSe7R3t50lK3O+dJS1V2j/YuVZScGC4OAAAAAAASTvkAcXa1cxfBEwAAAAAASEiZnTMImlzGUjsAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIgicAAAAAAAA4guAJAAAAAAAAjiB4AgAAAAAAgCMIngAAAAAAAOAIV4MnY8ypxpgFxphFxpgBAW43xphRvtt/MsYcUuG2xcaYucaYOcaYvOhWDgAAAAAAgKrUceuJjTGpkp6WdLKkpZK+N8aMs9b+UuGy0yS18311k/Ss789yx1trV0WpZAAAAAAAAFSDmx1Ph0laZK39w1q7TdI7ks6udM3Zkl63Xt9ISjfGtIp2oQAAAAAAAKg+N4OnDElLKhwv9Z0L9xoraYoxZrYx5nrHqgQAAAAAAECNuLbUTpIJcM5W45ru1tplxpiWkqYaY+Zba7/Y4Um8odT1ktSmTZva1AsAAAAAAIBqcLPjaamk3Ssc7yZpWbjXWGvL//xX0kfyLt3bgbX2eWttV2tt1xYtWkSodAAAAAAAAFTFzeDpe0ntjDFtjTF1JV0kaVyla8ZJusK3u93hktZZa5cbYxoaYxpLkjGmoaRTJP0czeIBAAAAAAAQmmtL7ay1JcaYGyTlSkqV9LK1dp4xprfv9jGSJkrqKWmRpM2SrvbdfRdJHxljJO9reMtaOznKLwEAAAAAAAAhGGsrj1VKXF27drV5eXlulwEAAAAAAJAwjDGzrbVdA93m5lI7AAAAAAAAJDA3d7UDAAAAACDu5eQXaETuAi0rLFLrdI+ye7RXZucMt8sCYgLBEwAAAAAANZSTX6CBY+eqqLhUklRQWKSBY+dKEuETIJbaAQAAAABQYyNyF/hDp3JFxaUakbvApYqA2ELwBAAAAABADS0rLKrWeSDZEDwBAAAAAFBDrdM91ToPJBuCJwAAAAAAaii7R3t50lK3O+dJS1V2j/YuVQTEFoaLAwAAAABQQ+UDxNnVDgiM4AkAAAAAgFrI7JxB0AQEwVI7AAAAAAAAOILgCQAAAAAAIIpWbFyhxYWL3S4jKlhqBwAAAAAAEAXWWp359pmasHCC93iQdbki5xE8AQAAAAAAOGzyosk67c3T/MevZ77uYjXRQ/AEAAAAAADgkA1bN6jFiBbaWrpVktSxRUfNyZqjtNQ0lyuLDmY8AQAAAAAAOOCBLx7QTsN38odOedflaV7feUkTOkl0PAEAAAAA4Jqc/AKNyF2gZYVFap3uUXaP9srsnOF2Wail31b/pvaj2/uP+x3aT6N7jpaUfJ85wRMAAAAAAC7IyS/QwLFzVVRcKkkqKCzSwLFzJSmhg4hEVmbLdPL/nazpf073n1uZvVLNGzSXlJyfOUvtAAAAAABwwYjcBf4AolxRcalG5C5wqSLUxrgF45R6f6o/dHqz15uyg6w/dJKS8zOn4wkAAAAA4lSyLdlxkxPv9bLComqdR2xat2Wd0h9O9x8f0uoQfXvtt6qTsmPkkoyfOR1PAAAAABCHypfsFBQWyeq/JTs5+QVul5ZwnHqvW6d7qnUeseee6fdsFzr92PtHzb5+dsDQSUrOz5zgCQAAAADiUDIu2XGLU+91do/28qSlbnfOk5aq7B7tg9wDseKXlb/IDDF68MsHJUm3H3G77CCrA3c5MOT9kvEzZ6kdAAAAAMShZFyy4xan3uvypXosl4wfpWWlOvqVozVr6Sz/udV3rFYzT7Ow7p+MnznBEwAAAADEodbpHhUECD4SecmOW5x8rzM7ZyR06JBIPvjlA53//vn+4/fPf1/ndTyv2o+TbJ85S+0AAAAAIA4l45Idt/BeJ7c1RWtkhhh/6NR99+4qubekRqFTMqLjCQAAAADiUDIu2XEL73Xyun3K7Xps1mP+43l956lji44uVhR/jLXW7RqipmvXrjYvL8/tMgAAAAAAQAz7ccWPOvi5g/3H9xx9j4aeMNS9gmKcMWa2tbZroNvoeAIAAAAAAJBUUlaiQ184VHNWzJEkGRmtvXOtmtRv4m5hcYwZTwAAAAAAIOm9NfctpQ1N84dO4y4ap7JBZYROtUTHEwAAAAAASForN61Uy0db+o9P2usk5V6WqxRDr04kEDwBAAAAAICkdMPEG/T090/7jxfcsED77ryvixUlHoInAAAAAACQVGYvm62uL/w3C3vo8UN1zzH3uFhR4iJ4AgAAAAAASaG4tFgHjTlIv676VZLkqePRv9n/qlHdRi5XlrhYsAgAAAAAABLeq3NeVd0H6vpDp8mXTtbmuzcTOjmMjicAAAAAAJCwVmxcoVaPtfIfn7nvmfr4oo9ljHGxquRB8AQAAAAAABLSdeOu04v5L/qP/7jxD7Vt2tbFipIPwRMAAAAAADWUk1+gEbkLtKywSK3TPcru0V6ZnTPcLivpzVoyS0e+fKT/+NGTH9VtR97mYkXJi+AJAAAAAIAayMkv0MCxc1VUXCpJKigs0sCxcyWJ8MklW0u2qsPTHbS4cLEkqZmnmZbcskQN0hq4W1gSY7g4AAAAAAA1MCJ3gT90KldUXKoRuQtcqii5PZf3nOo/WN8fOk27YppW37Ga0MlldDwBAAAAAFADywqLqnUezihYX6DdRu7mPz6/4/l697x3GR4eIwieAAAAAACogdbpHhUECJlap3tcqCb5WGt1+UeX6825b/rP/XXzX2rTpI2LVaEyltoBAAAAAFAD2T3ay5OWut05T1qqsnu0d6mi5PHFX18o5f4Uf+j01GlPyQ6yhE4xiI4nAAAAAABqoHyAOLvaRU9RcZH2GrWXVmxcIUnKaJyhRTcuUv069V2uDMEQPAEAAAAAUEOZnTMcD5py8gsItyQ9+c2Tujn3Zv/xl1d/qaPaHOVaPXwu4SF4AgAAAAAgRuXkF2jg2Ln+3fMKCos0cOxcSUqakOOvwr+055N7+o+vOOgKvXr2q64OD+dzCR8zngAAAAAAiFEjchf4w41yRcWlGpG7wKWKosdaq3PfO3e70Kng1gK9lvma6zvWJfPnUl10PAEAAAAAEKOWBdg1L9T5RDHtj2k66f9O8h8/d8Zzur7L9S5WtL1k/VxqguAJAAAAAIAY1Trdo4IAYUbrdI8L1Thvc/FmtX6stdZtXSdJ2qfZPprXd57qptZ1ubLtJdvnUhsstQMAAAAAIEZl92gvT1rqduc8aanK7tHepYqc88jMR9TwoYb+0Omba77Rwv4LYy50kpLrc6ktOp4AAAAAAIhR5YOqE3n3tN/X/K59ntrHf3z9IdfruTOfc7GiqiXD5xIpxlrrdg1R07VrV5uXl+d2GQAAAAAAJD1rrU5/63RNWjTJf27FbSu0S6NdXKwKNWGMmW2t7RroNjqeAAAAAABAVE1aOEk93+rpP34t8zVdcdAVLlYEpxA8AQAAAAAiJie/gOVHCGrD1g1qPqK5tpVukyQd0PIA/XD9D0pLTXO5MjiF4eIAAAAAgIjIyS/QwLFzVVBYJCupoLBIA8fOVU5+gdulIQYMnTFUOw3fyR86zb5+tub2mUvolODoeAIAAAAARMSI3AUqKi7d7lxRcalG5C6g6ymJLVi1QB2e7uA/vqnbTXri1CfcKwhRRfAEAAAAADXAkrIdLSssqtZ5JLYyW6aTXj9Jny3+zH9uZfZKNW/Q3MWqEG0stQMAAACAamJJWWCt0z3VOo/E9fH8j5V6f6o/dHr73LdlB1lCpyRE8AQAAAAA1RRqSVkyy+7RXp601O3OedJSld2jvUsVIdrWbVknM8Qo891MSdKhrQ9Vyb0luuiAi9wtDK4heAIAAACAamJJWWCZnTM0rFcnZaR7ZCRlpHs0rFenpF+CmCzunna30h9O9x//1PsnfXfdd0pNSQ1+JyQ8ZjwBAAAAQDW1TveoIEDIxJIyb/hE0JRc5v07Twc8e4D/+I4j79DDJz/sYkWIJQRPAAAAAFBN2T3aa+DYudstt2NJGZJNaVmpjnrlKH2z9Bv/uTV3rFFTT1MXq0KsIXgCAAAAgGoq7+hhV7voifQuguxKWDvvz3tfF3xwgf947AVjdc5+57hYEWIVwRMAAAAA1ECgJWWEGc4o30WwvMOsfBdBSTV6fyP9eMlkTdEa7fzIzv7jY/Y4Rp9d+ZlSDCOkERjBEwAAAABEQDTDjGTr/gm1i2BN6oz04yWL23Jv0+PfPO4//qXvL9qvxX4uVoR4QPAEAAAAABEQrTAjGbt/Ir2LILsSVs+cFXPU+bnO/uP7jrlPQ44f4mJFiCf0wgEAAABABEQrzAgVcMXC4zkh2G6BNd1FMNKPl6hKykp08JiD/aFTqknVugHrCJ1QLQRPAAAAABAB0QozkrH7J7tHe3nSUrc7V5tdBCP9eInojZ/eUNrQNP34z4+SpPEXj1fJfSXaqd5OLleGeMNSOwAAAACIgOwe7bdbsiY5E2a0TveoIEAoVJvun0g+nhMivYsguxIGt3LTSrV8tKX/+JS9T9GkSycxPBw1RvAEAAAAABEQrTAj0gFXtAKz2gq0i2AsPV4i6Dehn57Je8Z/vLD/Qu3TbB8XK0IiIHgCAAAAgAiJRphB909gsb4zXyzLW5anQ1841H/80AkPaeDRA12sCInEWGvdriFqunbtavPy8twuAwAAAAAQQZV35pO8XVvDenUifAqgPKQrKFyvfxr01xa7VJLUqG4jLb9tuRrVbeRyhYg3xpjZ1tqugW5jkSYAAAAAIK7Fw858saI8pFuw4WP95TnHHzoNOvxNbRi4gdAJEUfwBAAAAACIa/GwM1+seHDyLM2vc5pW1x0lSfKUHq42RZ9oav6uLleGRMWMJwAAAABwGPOHnBUPO/NFW6DvuXF/36u8ba/4r8nY8pLq2F0kEdLBOQRPAAAAAOCgyvOHCgqLNHDsXEkifIqQeNmZL1oqf8/9vv4HnTPuRP/tTYuv0U4l52x3n2QO6eAsltoBAAAAgIOYP+S8zM4ZGtarkzLSPTKSMtI9ST1YvPx7zqpYS+tdrX/qZUuS6ihd75y+ULuY87a7PplDOjiPjicAAAAAcBDzh6Ijs3NGzAZN0V5quaywSBtSJ2pN3Wf853bZ+pA8ZQfqwq77qF6qh6WfiBqCJwAAAABwEPOHklu0l1ouXb9Uiz1n+I8blByj5sXZMjL+77lYDumQeFhqBwAAAAAOyu7RXp601O3OsbQpeURrqaW1Vhd/eLF2H7m7/1zGllfUovgOGRm+5+AaOp4AAAAAwEHlnSUsbUpO0VhqOWPxDB332nH+49GnjVZGWibfc4gJBE8AAAAA4DCWNiUvJ5daFhUXaY8n9tDKzSslSbvvtLsW9l+oenXqSWLXRMQGltoBAAAAQILKyS9Q9+HT1XbABHUfPl05+QVul5R0nFpqOXLWSDV4qIE/dPrq6q/09y1/+0MnIFbQ8QQAAAAACSjaQ60RWKSXWi4uXKy2T7b1H1918FV65exXIlIr4ASCJwAAAABIQKGGWhM8RVckllpaa9XrvV7KmZ/jP7fs1mVq1bhVLasDnEXwBAAAAAAJKBpDrREdU3+fqlPeOMV//MKZL+jaQ651sSIgfARPAAAAAJCAnBxqjejYtG2Tdn1sV23ctlGS1K5ZO/3c92fVTa3rcmVA+BguDgAAAAAJyKmh1oiO4V8NV6Nhjfyh07fXfqvf+v9G6IS4Q8cTAAAAACSgSA+1jrac/IK4rb02Fq1ZpHZPtfMfZ3XJ0pgzxrhYEVA7BE8AAAAAEONqGsJEYqi1G+7Jmas3v/lb1necDDvyWWt12punKff3XP+5f27/Ry0btnSxKqD2CJ4AAAAAIIbl5Bdo4Ni5/h3qEj2Eyckv2C50KhfNHfmi3W014bcJOuPtM/zHr2e+rssPutyx5wOiieAJAAAAAGLYiNwF/tCpXDRDmGgbkbtgh9CpXDR25AsU9N3y7hzl/bVGD2R2iuhzrd+6Xjs/srNKykokSQfucqBmXz9bdVLqJO1SQyQegicAAAAAcFBtA4RgYUs0Qhg3hHpd0diRL1DQZyW9+c3f6rpHs4iFP4M/H6whM4b4j3+4/gd1btVZUvJ1uSGxsasdAAAAADikPEAoKCyS1X8BQk5+QdiPESxsiUYI44Zgr8tIUdmRL1jwZeUNpWpr/qr5MkOMP3S6udvNsoOsP3SSQne5AfGG4AkAAAAAHBKJACG7R3t50lK3O+dJS41KCOOGQK/XSLr08DZR6fYJFejVpsuszJbp2FeP1X5P7+c/typ7lUaeOjLs50nULjckNoInAAAAAIiwnPwCdR8+XQVBgoKCwqKwu54yO2doWK9Oykj3yEjKSPdoWK9OCbvkKtDrHXnhwRGfrxRMdo/2MkFuq2mXWc78HKXen6ov/vpCkvTOue/IDrLaucHO1XqeRO1yQ2JjxhMAAAAARFDl+TzBVGdmT2bnjIQNmgJx8/Vmds5Q3l9rdthZryZdZoVbCtX04ab+48MyDtPX//taqSmpIe7lDb8qfw8lcpcbEhsdTwAAAAAQQYGW1wXCzJ7Y9UBmJ4288OBadZkN/HTgdqHT3D5z9e2131YZOknJ1+WGxEbHEwAAAABEUHXm8DCzJ3bVtOvq539/Vqdn/1sWOKD7AA07aVhY963tDohALCJ4AgAAAIAIap3uCTrbKdC18Y6wxKu0rFRHvHSEvl/2vf/c2jvXKr1+elj3r7xEs3wHRCm85ZjBHpPPBm5jqR0AAAAARFCgXdnSUo3SUrYfWZ0IM3ty8guU/f6PKigskpU3LMl+/8ewB6cnind/fld1htbxh04fXfiR7CAbdugkRWYHxIrKg6yKn83AsXOT7rOB++h4AgAAAIAIKu8oqdxpEuhcvHefDB43T8VldrtzxWVWg8fNi/vXFo7Vm1er+Yjm/uNj9zhW06+crhRT/R6PYMsua7ocM1SQFYufDd1ZiYvgCQAAAAAiLNh8oET7RbqwqLha5xPJLZNv0RPfPuE//rXfr+rQvEONHy/YEs2aLseMdJDlJCeWGSJ2sNQOAAAAAIAw5S/Plxli/KHT4GMHyw6ytQqdpMBLNGuzHDNYYBWLc8UivcwQsYWOJwAAAABAjTRtkKa1m3fsbmraIM2FapxVUlaiQ547RHP/9XbipKWkadUdq7RTvZ0i8vjBlmjWtOMnu0f77bqIpNidKxZP3VmoPoInAAAAAECNDDpzf2V/8KOKS/+b85SWajTozP1drCry/u/H/9MVOVf4jydcMkE92/WM+PMEW6JZ08eS4mOuWKSXGSK2EDwBAAAAAGoknsKNmvh307/a5dFd/Men7nOqJl4yUcaYEPeKHZEMspwUT91ZqD6CJwAAAABAjdU03Ij1Xcx6j++t52Y/5z9e2H+h9mm2j4sVJa5EDzCTHcETAAAAAPjEehiSKGJ5F7PvCr5Ttxe7+Y+Hnzhcdx51p4sVJYd46c5C9RE8AQAAAIBiOwyJV8GCvFC7mLn1Xm8r3ab9n9lfi9YskiQ1rttYy29broZ1G7pSD5AoCJ4AAAAAQKG3dE+24CkSnV+hgrxY28XsxR9e1HWfXOc/nnLZFJ2898mu1AIkGoInAAAAAFDshSFuiVTnV6ggL1Z2MVu+YblaP97af3xOh3P04QUfxs3wcCAepLhdAAAAAADEgmChR7Jt6R4qMKqOUEFedo/28qSlbnc+2ruYXZVz1Xah0583/amxF44ldAIijOAJAAAAAKSYCENiQaQ6v0IFeZmdMzSsVydlpHtkJGWkezSsV6eoLGmc+fdMmSFGr/34miRpZI+RsoOs9kzf0/HnBpIRS+0AAAAAQMm7pXvleU7pDdK0dnPxDtdVt/Mru0f77ZbsSdsHedHexWxLyRa1e6qdlq5fKklq2bClFt+0WJ605OpoA6KN4AkAAAAAfJJtS/dA85zSUozSUo2KS63/upp0fsVSkPfM98+o38R+/uPPr/xcx+55bNTrAJIRwRMAAAAAJKlA85yKy6zSPWlqWK9OrQMjt4O8JeuWqM0TbfzHFx9wsd7s9SZznIAoIngCAAAAgCQVbG7TuqJizRl0SpSriRxrrS7+8GK9O+9d/7kXTv5Or3yxQXsNnJg0yyiBWEDwBAAAAABJqnW6RwUBwqd43snv88Wf6/jXjvcfP9PzGbWqc9YOSwoHjp0rSa6FT5VnaxGEIVGxqx0AAAAAJKlE2smvqLhILUa08IdOezTZQ1vu3qI+h/YJuKSwqLhUI3IXuFGqf7ZWQWGRrP4LwnLyC1ypB3ASwRMAAAAAJKnMzhka1quTMtI9MpIy0j0a1qtT3HXejJw1Ug0eaqBVm1dJkr7+39dafPNi1atTT1LwJYXBzjst1oIwwEkstQMAAACAOBXOcq2qrnF7AHht/Ln2T+01ai//8dUHX62Xz355h+tibUlhrAVhgJMIngAAAAAgDpUv1wo1tyica6JVayTnGVlrlflupsYtGOc/t/y25dq10a4Br8/u0X6790Fyd0lhrAVhgJNYagcAAAAAcSic5VqxsKQr0vOMpv4+VSn3p/hDp5fOekl2kA0aOkmxt6QwkWZrAVWh4wkAAAAA4lA4y7ViYUlXqPCrOsHPpm2btMuju2hT8SZJUvud22tun7lKS00L6/6xtKSwvA52tUMyIHgCAAAAgDgUznKtWFjSFYnwa9iXw3TX9Lv8x99f9726tu7qP470Ur5oiKUgDHASS+0AAAAAIA6Fs1wrFpZ0BQu5wgm/nv3yK5khxh86nbrnlbKD7A6hUySX8gGILDqeAAAAACDCotGBE85yrVhY0lWTwd5ltkxdnj1Bc1bO8J/brehNLV7UTDn5BdvVH4mlfPHYMQXEC2OtdbuGqOnatavNy8tzuwwAAAAACazyTnKSN2hxc5h1NAUKcaTww6/xv43XmW+f6T/eedttalR6vP84I92jmQNO8B+3HTBBgX6rNZL+HH56WPUm8+cFRIIxZra1tmug2+h4AgAAAIAIitQw7XhUOcQpX/Y2rFen7cKiQNZvXa+mDzdVmS2TJNUt20u7bh0po+2XClaeDVXbOVbhfl7R7oqiCwuJghlPAAAAABBBsbCTnFtChTihDP58sJoMb+IPnfKz8tXV88IOoZO0Y6BU2zlW4Xxe0Z4jxdwqJBKCJwAAAACIoNoM03ZKTn6Bug+frrYDJqj78OmOBRjVDd3mr5ovM8RoyIwhkqRbD79VdpDVwbseHHaglNk5Q8N6dVJGukdG3qV41VkmF87nVdNAraai/XyAk1hqBwAAgKTEMhY4pSbDtJ0UbPmbpIh/z4e77K3Mlum4V4/Tl39/6T+3+o7VauZp5j+uzmD0zM4ZNX4t4Xxe0e5iS+auOSQegicAAAAknWj+Io7kEws7yVUUzZlT4YQ4Y38dq3PfO9d//N557+n8/c8P+Hi1CZTCFc7nVds5UtUV7ecDnETwBAAAgKSTzMOfER2RDkxq06EXre6Z8hqLikuVaoxKrVVGhVrXFq1Vs0f+62g6Yrcj9OXVX+qTH1eo+/DproZ0VX1e0e5ii7WuOaA2CJ4AAACQdFjGgnhS2w69aHTPVK6x1Fp/UJLZOUMDPh2gh2c+7L/+5z4/a/+W+8dN92G0u9hirWsOqA1jrXW7hqjp2rWrzcvLc7sMAAAAuKz78OkBfxHPSPdUueU7EG21+X7NyS/QkE/mae3m4u3Op6UYNapfR4WbiyMSagSrMX2n5fqx+Dr/8V1H3aUHT3ywyvvxswjEF2PMbGtt10C30fEEAACApMMyFsSTmnboVe4mKudJS1FJmfWHUZHoMqpci1WpVtS7XX8VL/SfK7yzUE3qNwnrNdB9CCSOFLcLAAAAAKKtttuvA6Hk5Beo+/DpajtggroPn66c/IJaPV6wJXFVLZULNMtMkraVWBWXbr/ypXzGWSRq3JQ6Q397zta2FG/olHNhjuwgu0PoVPl+4ZwHEH/oeAIAAEBSisZuWUg+TswsqmmHXrCuodIg41Zq02WU3aO97hg7UwvrXOg/16DsIP3f2Z/o7A67h7wf3YdAYqPjCQAAAEDSinR3UqgdE2uqph16wbqGUo2p1vXh+GzFI9uFTp3TXtWbmRPU65DgoZNE9yGQDOh4AgAAAJCUnOhOcmpmUU069I7v0EJvfvO3KvY3edJSdW6XDH04uyAiXUY/LP9BXZ7v4j++/7j7de+x91brMeg+BBIbwRMAAACApBSqO6mmQUjrdE/AXdqiPbMoJ79AH84u2C50MpLO7ZKhBzI7qesezTQid4GWFRbVaFe74tJiHfL8Ifr5358lSfVS62ll9ko1rtc4si8EQNwjeAIAAACQlAIFRKHOhyPQzCLje8zuw6dXO+CpqUChmpX02fyVkmrXZfTanNd01cdX+Y8nXjJRp7U7raalAkhwBE8AAAAAklKqMQEHbQebgRSO8jBnRO4CFRQWyUj+rqNILOULlxNL/v7Z+I92fWxX/3HPdj01/uLxMrV4vwAkPoInAAAAAEkp2O5uwc6Hq7ybqPvw6Tt0T9V2KV+4Ir3kL+uTLD3/w/P+40X9F2nvZnv7j3PyC2q1dC8UJx8bgPMIngAAAAAkpYwg4UxGhOYxOTVoPByBlvxVHCAebpjz7dJvdfhLh/uPHz7pYd3R/Y7trnFiSHs0HhtAdKS4XQAAAAAAuCG7R3t50lK3O1fT3d0CCdZdFI1B45mdMzSsVydlpHtk5A3ThvXqpMzOGf4wp6CwSFb/hTk5+QX++28r3aZ9Ru3jD53S66dr012bdgidpNBD2mvLyccGEB10PAEAAABIShXnMTmxjKuqriOnBRsgXtVufi/MfkHXj7/ef9unl3+qE/c6MejzONnZ5WbXGIDIIHgCAAAAkLRqs7tbOI8tORds1VSw0ObvwqUyQ/4bFH7ufufq/fPfr3J4eKTnSUXrsQFEB8ETAAAAADjEyWCrokAzm6TAoVflMMfKanXa49pU5zP/ucU3LdYe6XuE9dxOdna53TUGoPYIngAAAAAgjgUawJ39/o+SkYpLrf9c+VDuimHOlpR5+qfenf7HarbtenVofKHy/6yjPTqH9/xOdnbFatcYgPAZW8utQuNJ165dbV5enttlAAAAAEDEdB8+PeBytEAy0j2aOeAEvZf3uy6f0E3btFqSlGqbKWPLizKqK8nbVVQ+jBwAqmKMmW2t7RroNna1AwAAAIA4Vp1B28sKizT6u9G6cMI+/tDpgLSR2m3L6/7QSWLnOACRQ/AEAAAAAHGsiSctrOtKzEot9pyh/pP6S5JapJyksWcu0cb17QJez85xACKBGU8AAAAAEKdy8gu0aVvJDudTJKWmGhWXWllZrUp7WJvrfOW/PaPoVdVRc9310c9Kb5CmtZuLd3gMdo4DEAl0PAEAAABACDn5Beo+fLraDpig7sOnKye/wO2S/EbkLvAPEK+oSYM0jTjvIDXaab7+9pzpD52abeunPYrGq46aS/IuqbPWO9OpInaOAxApdDwBAAAAQBCBdowr3x0uFgZvB1sOt2bzBv1vSietLV4rSWqb3lZlyx+XtOOyvHVFxRp54cHsHAfAEQRPAAAAABDEiNwF/tCpXPng7VgIZlqne3bY0W5dnbEqTHtZ2uI9nnXNLB2+2+FBd79rne5RZueMmHg9ABIPwRMAAAAA5eQXaETuAhUUFinVGJVaq4wodr6UP3+sddwE6yiKlcHb2T3a+zuyis0KLat/rf+2aztfqxfOeiHgteVYUgfAaQRPAAAAQJKrvJys1HpnBkVrWVksL2cL1FFUfj4WZHbOkLVW10w4X2vLvvGf363o//TLL62Vs3uB/z0s/zMWAz4AiYvgCQAAAEhygZaTlYvGsrJYXs5Wmy6haHRx5S7KVa9PTvUf71p6q+ptO0FS4AAvUkvqYrVDDUDsIXgCAAAAklxVy8acXlYWy8vZwukSChTCSHK0i2vjto1qOaKlikq871HHFh2107qRWr6ueLvrnAjwYrlDDUDsIXgCAAAAklyw5WQVb3fj+Vune2KisyZUl1CwECbFyLEurge/eFD3fHaP/zjvujx1ad1FbQdMCHh9pAO8WO5QAxB7Utx8cmPMqcaYBcaYRcaYAQFuN8aYUb7bfzLGHBLufQEAAACEJ7tHe3nSUgPeFo3h04Ge35OWquM7tNDAsXNVUFgkq/9CnZz8AkfrKZeTX6Duw6er7YAJ6j58esDnDRbCbNoWeOlibUKghasXygwx/tDphkNvkB1k1aV1F0nBA8JIB4ex3KEGIPa41vFkjEmV9LSkkyUtlfS9MWactfaXCpedJqmd76ubpGcldQvzvgAAAADCUHE5mRu72gVbzuZ0Z02obqqqlpNV3AWwOmoSApXZMp3yf6do2p/T/Of+vf1ftWjYYrvrqjuPqqbdZLE+cB1AbHFzqd1hkhZZa/+QJGPMO5LOllQxPDpb0uvWWivpG2NMujGmlaQ9w7gvAAAAgDBFauh0JJ//lnfnBLw2Ep01VQVLoUIvSTsEPOGqbvfYJws+0VnvnOU/frPXm7qk0yXbvY6K4dG5XTL02fyVVYZJtZnTVJuB67EsFpZ1AonIzeApQ9KSCsdL5e1qquqajDDvCwAAACCOVdVZU5ugoKpuqlDLyULtAhhKuict7PrWbVmn9IfT/ceHtDpE3177reqk/PcrXKDw6MPZBRrWq1OVz1ObbrJwBq7HGwamA85xM3gyAc7ZMK8J577eBzDmeknXS1KbNm2qUx8AAAAAF4XqrKltUFDVnKJQoVdNO64Gn7V/WNfd99l9GvrFUP/xnKw5OmjXg3a4bsgn82ocHtV2TpPbHXKRxsB0wDluDhdfKmn3Cse7SVoW5jXh3FeSZK193lrb1VrbtUWLFoEuAQAAABCDMjtnaFivTspI98hIykj3+Lt5qloKF0pOfoFSTKD/l/1fN1WwgefZPdoHnWWU7kkL+H/IJalpg6q7nX5Z+YvMEOMPnW4/4nbZQTZg6JSTX6C1m4sDPk444VG0BpHHCwamA85xs+Ppe0ntjDFtJRVIukjSJZWuGSfpBt8Mp26S1llrlxtjVoZxXwAAAABxLlhnTU2DgvJOqVK744KJinOKqlpOFqgTa/BZ+yvvrzV685u/t1uO4UlL1aAzg3c7lZaV6phXj9HXS772n1tzxxo19TQNep9QAVuKMWo7YELIJXCJOqepphiYDjjHteDJWltijLlBUq6kVEkvW2vnGWN6+24fI2mipJ6SFknaLOnqUPd14WUAAAAAcEFNg4Jg85lSjdG5XbydVLe8O8cf2swccMJ215XPlSoqLg24+19m5wx13aNZ2POPPvzlQ533/nn+4w/O/0Dndjy3ytcfKmArD9VCLT9MxDlNtUEQBzjH2ABJf6Lq2rWrzcvLc7sMAAAAALVUecaT5A0Kqhqs3XbAhMDDYX33D/Z4OfkFGvLJvB2Wt4XznIGsLVqrZo808x933727Zlw1Q6kpqf7XFyoU6j58esDgLZCMdM8OAVo5dnL7TyTeC95PJCtjzGxrbddAt7m51A4AAAAAaqSmHTvBOqVSjQk5M6pyyFX5mkDPGyyEyJ6SrUdnPeq/bl7feerYouN296tqcHqgDp1ggnVHsZPb9mo7MJ33EwiMjicAAAAASSNYp1SwAMcoeFhV8Zo/h59e5fNsM39oef0b/cf3HH2Php4wVJUF62aq3LlUMdhK8S37CyRYx1O4z4Pw8H4imdHxBAAAAAAK3ik1IndB0JlRVQ0sDzRXquIsKatSrah3q7al/O6//Y3TftGlh+0X8PHCHZxesUOn7YAJQesLNqeIndwii/cTCIzgCQAAAEBSCbakKthw6WChVMVrKisPGzanfK2V9R7yn2+x9V41KOumZ6YvDxo81WRwerD7NG2QFnSZFzu5RRbvJxBYitsFAAAAAIDbMjtnaFivTspI98jIuzyqfGh4do/28qSl7nCfdE9a0MHiuzSR1tZ5xR861S89WG2KxqlBWTdJobtgAj1fVTusBbvPoDP3j+jzIDjeTyAwOp4AAAAAxLSKs4zSG6TJWmldUXFYA8Wrs8tYsE6oysvzmnjSZIxUuLnYP3y84v0mLpyoP+v00fq0JWpYcrKaFl+hVDXd7jFDdcHUZHB6tO6D4Hg/gcAYLg4AAAAgZgUa0l2RJy01aNdRsEHiwa6vfN/B4+apsKhYknfJWnn3ULDHPGwfo5sn36z3f3lfHZp30GXtH9AHXzfW2s3FYdcMAPEo1HBxgicAAAAgQVSnuydeBNsprKJAu4bl5Bfotvd+DLjTW1W7jOXkFyj7/R9VXLb9fdNSjRrWreMPo8pZlSq18adanfqatpZs1T3H3KPsI7NVr049/+PFy+cST7UCiB3sagcAAAAkuMrdPQWFRRo4dq4kxXVwEM6OYJWvKX8vAoVO4TzmiNwFO4ROklRcancInbaZP7S67lPaVrJQJ7U5Sc+e/qz2abbPdtcEW8IXa8L5HiKYAlBdBE8AAABAAhiRu2CH5WhFxaUakbsgboKBQKFGsJ3CKqo8LynQexHq+srCCbvKVKTCOm9qQ51xStFOalfnLk257AEZY6q8b6yq6nuoJuEmQRUAdrUDAAAAEkCwsCScECUWlIcaBYVFsvov1Di+Q4uAO8qVC7RrWKjXHM4uY+kN0oLe1rRBmkrqfq9l9fpqQ1qOGpWeor1Ln9cjPfvGdegkVf09FCqYCiTYZ5qTXxDRugHENoInAAAAIAEE6+KpqrsnVgQLNT6bv1LDenVSRrpHRt7gJ92TJiPvrKZAQ7qDveZUY7a7Pie/QN2HT1fbARPUffh0fyASbAxuiVmpers8roLUIaqX2ki7bn1EBzbM1iO9jkyILp6qvoeqG25WN6gCkJhYagcAAAAkgOwe7QPutlZVd0+sCBVqVHdGUrD3onLoFGzZ2LoAw8M3pI5XYdobWrNKGn7icN16xK1KSw3eGRWPqvoeCrbsMVhgFe9deAAig44nAAAAIAFkds7YrjMoWDdQrIpkx1Y470WobpyKz7nVLNSKerdqbd0X1CTlAM3rO093HnVnwoVOUtXvW3aP9jssewwVbsZ7Fx6AyDA2WB9pAuratavNy8tzuwwAAAAAlVTuQJJ27FKKpLYDJijQb0JG0sgLD9YdY7/RCr2mDakTlKom2qWst0Zn9tU5h+wW8Vqqw+1h3dV5/mh/pgDcY4yZba3tGug2ltoBAAAAcF15EOFkqFIxNEkxRqUB/id8qyb1VVb/W61u1E8btvyrxiU9tV+D6zXw1C6uhyU12VUu0qqz7DEanymA2EfHEwAAAICEF6j7prI6aavUNOMN5f3zqQ7a5SA9d8Zz6rZbtyhWGVr34dMDzljKSPdo5oATQt7X7U4pAImNjicAAAAgzhEchCfY+xRoppPk3emu1BZLjSZpqV7X8jVGj578qG46/CbVSYmtX5dqOqw7FjqlACSv2PonKQAAAIAdxHJwEEuBWKj3KVg4s1m/quWer+unf37SmfueqadOe0p7pO8RtZqro7q7ypULNUg9s3NGTH2GABIPu9oBAAAAMS5UcOCm8qCnoLBIVv8FPTn5Ba7UE+p9auLZfhe6Mm3S6rRntaJ+tlZvXq2xF4zVxxd9HLOhk1T9XeXKheqUirXPEEDiIXgCAAAAYlxNl1g5LdYCsWDvR0FhkTZtK5EkWVltSv1Sy+r31sbUSTpjr//p136/6pz9zpExJprlVltm5wwN69VJGekeGXlnO4WzQ1ywjqjW6Z6Y+wwBJB6W2gEAAAAxrqZLrJwWa4FYsPcp1RgVl1oVmxVak/astqTOVt2yvbV3ylB9cnm/kI/pxDK02jxmdXaVK5fdo/0Og9XLO6VueXdOwPu4HWoCSBx0PAEAAAAxrqZLrJwWqpPGDcHepxJbrHV13tfyev20NeUXNd12nXbd+ri2Fe0Z8vGcWIYW6cfMyS9Q9+HT1XbABHUfPj3g44TqlIq1zxBA4qHjCQAAAIhx5R0usTYAOlQnjRsCvU9nHrpBQ2feos32T3lKj1CzbVmqo+aSaj+UO5TyrqaCwiLfznlWGekebd5WUuPHDPQc4Q6dD9YpFWufIYDEQ/AEAAAAxIGaLLFyWrQCseosTSt/n9YWrdWATwdo4FfPq4UnQ003DlKdbYf6r6vtUO6q6q0Y5pRaK0kBlwGG+5iB1CYYKxeroSaAxEHwBAAAAKDGnA7EAnX13PzuHA35ZJ4Gnbn/Ds9trdXbP7+tW3Jv0erNq3XbEbdp8HGD9em8ddUOV2o6WytQIFSVmixti9SMrVgMNQEkDoInAAAAADXmxPDtioKFOGs3F++wrGzRmkXqM6GPPv3jUx2WcZhyL8vVwbse7LumUUSHcodS3eAn2GNW9d7G6tB5AKiI4eIAAAAAasSJ4duVhQpxypeVbS3Zqge+eEAHPHOAviv4Tk/3fFpf/+9rf+hUU6GGcodSVfCT7kmr8jHDeW9jdeg8AFRExxMAAACAGonEjKGqBOvqKffH+u918HP9NH/VfF2w/wUa2WOkWjduHZHnlmq2DC1Qp1Q5T1qqBp+14xLByqp6b8u7oYqKS7cbXh6P85mc7poD4C6CJwAAAAA1EqkZQ6EEC3FKtV5r017Wpjqfqn7Jnpp4yUSd1u60iD1vbVQc2F15V7vKoUqw0CXUextoeHl5p1O8BTbV2ZkPQHwieAIAAABQI9GYMVQePgweN0+FRcWystqUOl1r015SmTbpnH366o0LRqhBWoOIPWckhNMpFSp0CfXeOtlpFu3uo2h0zQFwFzOeAAAAANRItGYMZXbO0JxBpyj79MYqbHCPVtcdqYYpu+uJ4ydr7KVPx1zoFK5QoUuo99apTrNozOyqLBpdcwDcRfAEAAAAoEaqM3w7J79A3YdPV9sBE9R9+PRqhRlbSrZo8OeDdeuMk5VS7y89d8ZzKrz3J9107EkRfDXRFyp0CfXeBusoq22nWaggzClOvRYAsYOldgAAAABqrLZLyqq67/Q/p6v3+N5auGahLul0iR4/5XHt0miXyBTvsqqWKgZ7bwPNvYpEp5kb3UdOvRYAsYOOJwAAAACOqkknzcpNK3XFR1foxNdPVJkt05TLpujNXm8mTOgk1XypYnU6zarDje4jp14LgNhBxxMAAAAAR1Wnk6bMlumV/FeUPTVbG7dt1D1H36O7jr5LnrTEW3pVcfe76g7zrnzf8hCvNoGNW91H4XTNAYhfBE8AAAAAHBXu7ne/rPxFWeOz9NXfX+noNkfruTOe034t9qv280VzZ7baPldNQ5faLF8MVYtUsyAMAIIheAIAAADgqKo6aYqKi/TAFw9oxNcj1LheY7101ktKtyfr2pcWalnhH9UKQJwIZGLhuSoLtXyxNs9N9xGASGPGEwAAAABHhZrjM+X3KTrg2QP00FcP6ZJOl2h+v/lqph66+6N5KigskpU30Ml+/0d1vn9KlbviRXNnNjd2gSvnxiBwAKgJOp4AAAAAOK5yJ82KjSt0yYeX6O2f39a+O++r6VdM1/Ftj5ckjcidvkOgU1xmtXZzsaTQnUXRDGTcDH/CXb4YadFcxgggMdDxBAAAACBqymyZxuSNUYfRHfThrx9q8LGD9VPvn/yhkxRecBOosygnv0ApxgS83olApja7wOXkF6j78OlVdnAFU9Md8WqjfGlhxU60gWPnVrt2AMmF4AkAAABIQLUNNpww95+5Ourlo9RnQh8d0uoQ/dT7Jw06bpDq1am33XXhhkQVA6ryUKTU2h2ucyqQqWn4E4kAJ9TyRae4ubQQQPxiqR0AAACQYNwceh3Ipm2bdP+M+/XYrMfU1NNUr2e+rssOvEwmSHdSoGHkgVQMqAKFIpKUaoxjgUxNd4GL1GDwaA8CZ64UgJogeAIAAAASjFM7ntXExIUT1XdCX/217i9d0/kaPXzSw9q5wc4h71Mx0Ak0x0iSjLRdZ1Gw8KPM2lq95sozjY7v0EKfzV+5XdA0c8AJ1XrMeA1w3JorBSC+sdQOAAAASDCxEGws27BMRz5/hk5/63QtW1umA9JG6ozdh1QZOpXL7JyhmQNOUOCeKMlq++6t2sxbCibQkrg3vvm71jOOnKg1GtyYKwUg/hE8AQAAAAnGzWCjtKxUo78brX1Gtdc3y6YqvfgKtdo6ShvWt4toSJNR6bwToUiw5XsV1WTGUbwGOG7MlQIQ/1hqBwAAACSYQDOSohFs5C/PV9b4LH2/7Hulm65qujVLabaV//aaLPcL97XUdN5SKOF2iFW3k8yJWqMl2nOlAMQ/gicAAAAgwUQ72Ni4baPu++w+Pfntk2rRoIXe6vWWBr7ZWAqwUM7JkCbSoUiwmUaBrqsuAhwAyYLgCQAAAEhA0Qo2Pp7/sfpP6q8l65coq0uWhp04TE09TTU6fXrEBlG7FdIc36GF3vzmb9kQ18TDEjkAcBMzngAAAABU25J1S3TOu+co891MNanfRDP/N1Njzhijpp6mkuJ3jlG5nPwCfTi7YLvQyUjqvncz/3ypVGP8ywerO7sK0ZGTX6Duw6er7YAJ6j58Op8T4IJqdTwZY1IkNbLWrneoHgAAAAAxrKSsRKO/G617P7tXpWWlevikh3XL4bcoLTVtu+sivdwvJ78gqjORAg0Wt5IWry7aYe5U+e52klg+F0PKdyXkcwLcZawN1TgqGWPektRbUqmk2ZKaSHrcWjvC+fIiq2vXrjYvL8/tMgAAAIC4lLcsT9d/cr3yV+SrZ7ueGn3aaLVt2rZWjxlOoFQ5QJC83VNO7qjWdsCEgEvsjILPfspI92jmgBMcqQfV13144OWefE5A5BljZltruwa6LZyldh19HU6ZkiZKaiPp8siVBwAAACCWrd+6XjdOulHdXuymFRtX6P3z39f4i8dHJHQaOHauCgqLZPVfR0rl5VCBuo/Kl7g5JdgsqtbpnqAD0qs7OB3O4nMCYkM4wVOaMSZN3uDpY2ttsRRyvh4AAACABGCt1Ye/fKj9nt5Po78brb5d++rXfr/qvI7nyZgdd6yrrnADJTcChFAzqkKFUuFycvYQc428IvE5Aai9cIKn5yQtltRQ0hfGmD0kMeMJAAAASGCLCxfrzLfP1Hnvn6eWDVvqm2u/0VM9n1KT+k0i9hzhBkpuBAiZnTM0rFcnZaR7ZORdnlW+tK+2g9PD7fSqCScfO97E+4B7IFFUGTxZa0dZazOstT2t11+Sjo9CbQAAAACirLi0WCNmjtD+z+yvzxd/rsdOeUzfX/e9Dss4LOT9atJlE26g5EaAEGr2VKhQKhxOLh10Y1lirKrt5wQgMqrc1c4YU0/SuZL2rHT9/Q7VBAAAAMAF3yz9Rlnjs/TTPz/prPZn6anTnlKbJm2qvF9Ndw+rvDucFDhQqmqHvEjveBfO68nsnFHj56jO0sHqvjbmGm2vNp8TgMioMniS9LGkdfLuaLfV2XIAAAAARFvhlkLdNe0ujckbo9aNW+ujCz9SZofMsO8fqssm1C/9VQVKla8NdL6moZcTrydcwXbFq9zpVZPXFu5jA0C0hBM87WatPdXxSgAAAABElbVW7817Tzfn3qx/N/2rm7rdpPuPv1+N6zWu1uPUpsumth0pToREgYKbUOerK9xOr5q8tnAfGwCiJZzg6WtjTCdr7VzHqwEAAAAQFX+s/UN9J/RV7u+56tKqiyZcMkGHtDqkRo/lZpeNE0vLUo1Rqd1xI+/UCOzkJ4Xf6VWT11adLrJkFemlmQBCCyd4OkrSVcaYP+VdamckWWvtgY5WBgAAACDitpVu02NfP6b7v7hfaSlpGnXqKPU9tK9SU1KrvnMQbnbZOBF6BQqdQp2viXA6vWr62phrFJwTSzMBhBZyVztjjJHUW1I7SadIOlPSGb4/AQAAAMSRr/7+Soc8d4jumn6XTm93un7t96v6d+tfq9BJcnf3MCd2vMsIEuwEO+8UN3bzS3Ts+gdEX8iOJ2utNcaMtNZ2iVZBAAAAACJrTdEa3Tn1Tr2Y/6LaNGmjTy7+RGfse0ZEn8OtLhsnlpbFypwkls1FHrv+AdEXzlK7b4wxh1prv3e8GgAAAAARY63Vm3Pf1K25t2pN0RrdfsTtGnzcYDWs29Dt0iIq0qFXLAU+LJuLLHb9A6IvnODpeElZxpi/JG0SM54AAACAmLdw9UL1mdBH0/6cpm4Z3TT18qk6aNeD3C4rbhD4JKZY6WYDkkk4wdNpjlcBAAAAICK2lmzVIzMf0YNfPqj6derrmZ7P6Pou19d6jlMsY5cyhCuWutmAZBFO8BS5rRsAAAAAOGbG4hnKGp+lBasX6ML9L9TIHiPVqnErt8tyFLuUobroZgOiK5zgaYK84ZORVF9SW0kLJO3vYF0AAAAAwrRq8yplT83Wq3NeVdv0tpp06SSdus+pbpcVFaF2KSNcAAD3VRk8WWs7VTw2xhwiKcuxigAAAACExVqr1358TbdPuV3rtq7TwKMG6p5j7lGDtAZulxY17FIGALEtnI6n7VhrfzDGHOpEMQAAAADCM3/VfPUe31sz/pqh7rt315gzxuiAlge4XVbUVWeXMmZBAUD0VRk8GWNurXCYIukQSSsdqwgAAABAUFtKtuihLx/S8K+Gq2Hdhnr+jOd1zSHXKMWkuF2aK8LdpYxZUADgjnA6nhpX+HuJvDOfPnSmHAAAAADBTPtjmvpM6KOFaxbq0k6X6rFTHtMujXaJag2x1jUU7i5lzIICAHeEEzz9Yq19v+IJY8z5kt4Pcj0AAACACPp307+6bcpteuOnN7RPs3005bIpOnnvk6NeR6x2DYWzSxmzoADAHeH04w4M8xwAAACACCqzZXrxhxfVYXQHvfvzu7rn6Hv0U++fXAmdpNBdQ7Eu0MynUOcBAJERtOPJGHOapJ6SMowxoyrctJO8S+4AAAAAOGTev/OUNT5LM5fM1DF7HKMxp4/Rfi32c7Wm2nQNub1EL9xZUACAyAq11G6ZpDxJZ0maXeH8Bkm3OFkUAAAAkKw2F2/WA188oBFfj9BO9XbSy2e9rKsOvkrGGLdLq9YOchXFwhK9cGdBAQAiy1hrQ19gTJq8AVUba23s99CG0LVrV5uXl+d2GQAAAEBAkxdNVt8JffVn4Z+68qArNeLkEWrRsIXbZflVDpAkb9fQsF6dQgY43YdPDxhYZaR7NHPACY7UCgCIHmPMbGtt10C3hTPj6VRJcyRN9j3YwcaYcZErDwAAAEhuyzcs10UfXKTT3jxNaalpmn7FdL2a+WpMhU6St2toWK9Oykj3yMgbHFUVOkkM9gaAZBbOrnaDJR0m6XNJstbOMcbs6VxJAAAAQHIos2V6Lu85DZw2UEUlRRpy3BDd2f1O1atTz+3SggpnB7nKarpEDwAQ/8LpeCqx1q5zvBIAAAAgifz0z0/q/nJ39Z3YV11ad9HcPnN137H3xXToVFPZPdrLk5a63TkGewNAcgin4+lnY8wlklKNMe0k3Sjpa2fLAgAAABLTpm2bNGTGED0+63E19TTV65mv67IDL4uJ4eFOYbA3ACSvcIKn/pLulrRV0tvyznoa6mRRAAAAQCIa/9t43TDxBv217i9d2/laPXzyw2rmaeZ2WVFRkyV6AID4V2XwZK3dLG/wdLckGWM6SBot6TpnSwMAAAASQ8H6At00+SZ9+OuH6tiio7646gsdvcfRbpcFAIDjgs54MsYcaIyZYoz52Rgz1BizizHmQ0mfSvoleiUCAAAA8am0rFRPffuU9nt6P01YOEEPnvCg8rPyCZ0AAEkjVMfTC5KelTRL0qmSfpD0lqRLrbVbolAbAAAAELd+WP6DssZnKW9Znk7Z+xQ90/MZ7d1sb7fLAgAgqkIFT/Wsta/6/r7AGHO7pAHW2lLnywIAAADi04atG3TfZ/dp1Hej1KJBC7197tu6cP8LE3p4OAAAwYQKnuobYzpLKv835EZJBxrfvzGttT84XRwAAAAQT3Lm56j/pP5aun6penfprWEnDVN6/XS3ywIAwDWhgqflkh6vcLyiwrGVdIJTRQEAAADxZMm6Jeo/qb8+XvCxOrXspPfOe09H7H6E22UBAOC6oMGTtfb4aBYCAAAAxJuSshKN+naU7vvsPpXZMj1y0iO6+fCblZaa5nZpSSknv0AjchdoWWGRWqd7lN2jvTI7Z7hdFgAktVAdTwAAAACC+L7ge10//nrNWTFHPdv11NM9n9ae6Xu6XVbSyskv0MCxc1VU7B1JW1BYpIFj50oS4RMAuCjF7QIAAACAeLJuyzr1n9hf3V7spn82/qP3z39f4y8eT+jkshG5C/yhU7mi4lKNyF3gUkUAAClEx5Mxpru1dqYxpp61dms0iwIAAABijbVWH/76oW6cdKNWbFyhfof20wMnPKAm9Zu4XRokLSssqtZ5AEB0hFpqN0pSF0mzJB0SnXIAAACA2LO4cLH6TeyniQsn6uBdD1bORTk6LOOwqD0/s4uq1jrdo4IAIVPrdI8L1QAAyoUKnoqNMa9IyjDGjKp8o7X2RufKAgAAANxXXFqskd+M1ODPByvFpOjxUx5X/279VScleqNSmV0Unuwe7bd7nyTJk5aq7B7tXawKABDq35hnSDpJ0gmSZkenHAAAACA2zFoyS1njszT337k6u/3ZGnXaKLVp0ibqdYSaXUTw9J/y94LOMACILUGDJ2vtKknvGGN+tdb+GMWaAAAAANesLVqrgdMG6vnZzytjpwx9dOFHyuyQ6Vo9kZxdlOhL9jI7ZyTU6wGARBBOj/BqY8xHkrpLspK+knSTtXapo5UBAAAAUWSt1Ts/v6Nbcm/Rys0rdfPhN2vIcUPUuF5jV+uK1OwiluwBANyQEsY1r0gaJ6m1pAxJn/jOAQAAAAnh9zW/69Q3T9UlYy/R7k121/fXfa/HezzueugkeWcXedJStztXk9lFoZbsAQDglHA6nlpaaysGTa8aY252qB4AAAAgaraVbtOjXz+qoV8MVVpKmkadOkp9D+2r1JTUqu8cJZGaXRTJJXsAAIQrnOBppTHmMklv+44vlrTauZIAAAAA533515fqPaG3fln5i87d71w9eeqTytgpNpecRWJ2UaSW7AEAUB3hLLX7n6QLJK2QtFzSeb5zAAAAQNxZU7RG1427Tse8eow2btuoTy7+RB9c8EHMhk6REqklewAAVEeVHU/W2r8lnRWFWgAAAADHWGv15tw3dWvurVpTtEbZR2Zr0LGD1LBuQ7dLi7hQu9cl8q52AIDYE85SOwAAACCu/bb6N/Wd0FfT/pymbhndNPXyqTpo14PcLssRVe1eF8mgKVTABQCAFN5SOwAAACAubS3Zqvtn3K8Dnz1Qecvy9Ozpz+rra75O2NBJit7udeUBV0Fhkaz+C7hy8gsi+jwAgPhGxxMAAAAS0ueLP1fv8b21YPUCXXTARRrZY6R2bbSr22U5Llq714UKuOh6AgCUq7LjyRizizHmJWPMJN9xR2PMNc6XBgAAAFTfqs2rdFXOVTr+teO1rXSbJl86WW+f+3ZShE5S8F3qIr17XbQCLgBAfAtnqd2rknIltfYd/ybpZofqAQAAAGrEWqtX8l9Rh9Ed9ObcNzXwqIH6ue/P6rFPD7dLk+RdmtZ9+HS1HTBB3YdPd2xJWrR2r4tWwAUAiG/hBE/NrbXvSSqTJGttiaTS0HcBAAAAomf+qvk6/rXj9b9x/1OH5h00J2uOHjrxITVIa+B2aZKiOw8ps3OGhvXqpIx0j4ykjHSPhvXqFPHlb9EKuAAA8S2cGU+bjDE7S7KSZIw5XNI6R6sCAAAAwrClZIse+vIhDf9quBrVbaQXznxB/+v8P6WY2NpDJ9rzkCK9e12w55DErnYAgJDCCZ5ulTRO0t7GmJmSWkg639GqAAAAgCp8+sen6jOhjxatWaTLDrxMj53ymFo2bOl2WQEl6jykaARcAID4Fk7wNE/SsZLaSzKSFii8JXoAAABAxP276V/dmnur3pz7pvZpto+mXj5VJ+11kttlhdQ63aOCACET85DiW05+AR1fAFCFcAKkWdbaEmvtPGvtz9baYkmznC4MAAAAqKjMlumF2S+o/ej2em/ee7rvmPs0t8/cmA+dJOYhJaJozu0CgHgWtOPJGLOrpAxJHmNMZ3m7nSRpJ0mxMaURAAAASeHnf39W7/G9NXPJTB27x7Eac8YYdWjewe2ywsY8pMQT7bldABCvQi216yHpKkm7SXq8wvkNku5ysCYAAABAkrS5eLOGzhiqR2c9qib1muiVs1/RlQddKWNM1XeOMcxDSiyJOrcLACItaPBkrX1N0mvGmHOttR9GsSYAAABAkxdNVt8JffVn4Z+66uCrNOLkEWreoLnbZaGWEmUuEnO7ACA8VQ4Xt9Z+aIw5XdL+kupXOH+/k4UBAAAgOS3fsFy35N6id+e9q/Y7t9dnV36m4/Y8zu2yEAHlc5HKl6iVz0WSFHfhU3aP9tu9Fom5XQAQSJXBkzFmjLwznY6X9KKk8yR953BdAAAASDJltkzP5T2nAdMGaGvJVt1/3P26o/sdqlenntuloZKadi0l0lwk5nYBQHiqDJ4kHWmtPdAY85O1dogx5jFJY50uDAAAAMnjxxU/Kmt8lr4t+FYntj1Rz57+rNrt3M7tsmKaW0vWatO1lGhzkZjbBQBVSwnjmvJ/C2w2xrSWVCyprXMlAQAAIFls2rZJ2VOy1eX5Lvpj7R9645w3NPXyqYROVSgPfwoKi2T1X/iTk1/g+HOH6lqqSrD5R8xFAoDEFU7wNN4Yky5phKQfJC2W9I6DNQEAACAJjP9tvDo+01GPznpU/+v8P82/Yb4uPfDSuNyxLtpqE/7UVm26lrJ7tJcnLXW7c8xFAoDEFs5w8aG+v35ojBkv74DxEkerAgAAQMIqWF+gGyffqLG/jtX+LfbXl1d/qaPaHOV2WXHFzSVrtdnNjblIAJB8QgZPxpgMSa0k/WSt3SapiaSbJV0lqbXTxQEAACBxlJaV6unvn9Y90+9RcVmxHjrhId125G2qm1rX7dLiTm3Cn9qqaje3qmZPMRcJAJJL0KV2xpibJc2R9JSkb4wxV0r6VZJHUpdoFAcAAIDE8MPyH3T4S4frpsk36cjdj9S8vvM08OiBhE415OaStczOGRrWq5My0j0ykjLSPRrWq5MyO2e4OnsKABCbQnU8XS+pvbV2jTGmjaRFko6x1n4TndIAAAAQ7zZs3aD7PrtPo74bpZYNW+qdc9/RBftfwBynWnJ7yVqwrqVQs6focgKA5BQqeNpirV0jSdbav40xvxE6AQAAIFw583PUf1J/FawvUO+uvfXQiQ8pvX6622UljFhcsubm7CkAQGwKFTztZowZVeG4ZcVja+2NzpUFAACAePX3ur/Vf1J/jVswTgfucqDeP/99Hb7b4W6XhShwc/YUACA2hQqesisdz3ayEAAAAMS3krISjfp2lO777D5ZWY04eYRu6naT0lLT3C4NUVLV4HEAQPIJGjxZa1+LZiEAAACIX98VfKes8Vmas2KOTm93up7u+bT2SN/D7bIQZW7PngIAxJ5QHU8AAABASOu2rNPd0+/WM98/o1aNW+mD8z9Qr/16MTw8icXi7CkAgHsIngAAAFBt1lp98MsHumnyTVqxcYVuOOwGPXDCA9qp3k5ulwYAAGJIlcGTMaZZ+e52AAAAwOLCxeo3sZ8mLpyoQ1odonEXj1PX1l3dLgsAAMSgcDqevjXGzJH0iqRJ1lrrbEkAAACIRcWlxRr5zUgN/nywUlNSNbLHSN1w2A2qk0ITPQAACCyc/0rYV9JJkv4n6SljzLuSXrXW/uZoZQAAAIgZs5bMUtb4LM39d64yO2Rq1KmjtHuT3d0uCwAAxLiUqi6wXlOttRdLulbSlZK+M8bMMMYc4XiFAAAAcM3aorXqPb63jnz5SBVuKVTOhTn66MKPCJ0AAEBYwpnxtLOkyyRdLukfSf0ljZN0sKT3JbV1sD4AAAC4wFqrd35+Rzfn3qxVm1fp1sNv1ZDjh6hR3UZulwYAAOJIOEvtZkn6P0mZ1tqlFc7nGWPGOFMWAAAA3PL7mt/VZ0IfTf1jqg5tfagmXzpZnVt1drssAAAQh8IJntoHGyhurX04wvUAAADAJdtKt2nEzBF64MsHlJaSpqdOe0p9uvZRakqq26UBAIA4FTR4MsZ8Isn6/r7D7dbas5wrCwAAANH05V9fKmt8ln5d9avO73i+njj1CbVu3NrtsgAAQJwL1fH0aNSqAAAAgCtWb16tOz+9Uy/lv6Q9muyhCZdMUM92Pd0uCwAAJIigwZO1dkY0CwEAAED0WGv1fz/9n26bcpvWFq3VHUfeofuOvU8N6zZ0uzTEgZz8Ao3IXaBlhUVqne5Rdo/2yuyc4XZZAIAYFGqp3XvW2guMMXPlW3JXkbX2QEcrAwAAgCN+W/2b+kzoo+l/Ttfhux2u5854Tgfuwn/aIbTysKmgsEhG//2CUFBYpIFj50oS4RMAYAehltrd5PvzjGgUAgAAAGdtLdmq4V8N10NfPSRPHY/GnD5G13W5Tikmxe3SEONy8gs0cOxcFRWXStrx/0oXFZdqRO4CgicAwA5CLbVb7vvzr+iVAwAAACd89udn6j2ht35b/ZsuPuBiPd7jce3aaFe3y0KcGJG7wB86BbOssChK1QAA4kmV/3vLGHO4MeZ7Y8xGY8w2Y0ypMWZ9NIoDAABA7azctFJX5lypE14/QSVlJcq9LFdvnfsWoROqJZxQqXW6JwqVAADiTailduVGS7pI0vuSukq6QtI+ThYFAACA2rHW6pU5ryh7arY2bN2gu4++W3cffbc8aYQDqL7W6R4VhAifPGmpyu7RPooVAQDiRVgL+q21iySlWmtLrbWvSDre2bIAAABQU7+u/FXHvXacrhl3jTq26Kg5vefogRMeIHRCjWX3aC9PWup254zvz4x0j4b16sR8JwBAQOF0PG02xtSVNMcY84ik5ZLYZxcAACDGFBUX6cEvH9QjMx9Ro7qN9OKZL+rqzlczPBy1Vh4qjchdoGWFRWqd7lF2j/aETQCAKoUTPF0ub2fUDZJukbS7pHOdLAoAAADVM/X3qeozoY9+X/u7Lj/wcj16yqNq2bCl22UhgWR2ziBoAgBUW5XBk7X2L2NMC9/fhzhfEgAAAML1z8Z/dOuUW/XW3LfUrlk7Tbtimk5oe4LbZQEAAEgKETwZY4ykQfJ2OhlJKcaYEklPWWvvj1J9AAAACKDMlunFH17UnZ/eqc3FmzXo2EEacNQA1a9T3+3SAAAA/EJ1PN0sqbukQ621f0qSMWYvSc8aY26x1o6MQn0AAACoZO4/c9V7Qm99veRrHbfncRpz+hi1b86OYgAAIPaECp6ukHSytXZV+Qlr7R/GmMskTZFE8AQAABBFm4s36/4Z9+uxWY+pSb0mevXsV3XFQVfI26gOJLec/AKGnwNADAoVPKVVDJ3KWWtXGmPSHKwJAAAAlUxaOEl9J/bV4sLFuvrgq/XIyY+oeYPmbpcFxISc/AINHDtXRcWlkqSCwiINHDtXkgifAMBlofbW3VbD2wAAABAhyzYs0wXvX6Ceb/VU/Tr19fmVn+vls18mdAIqGJG7wB86lSsqLtWI3AUuVQQAKBeq4+kgY8z6AOeNJKZWAgAAOKi0rFRj8sborul3aWvJVg09fqiyj8xWvTr13C4NiDnLCouqdR4AED1BgydrbWo0CwEAAIDXnBVzlDU+S98VfKeT9jpJz/R8Ru12bud2WUDMap3uUUGAkKl1useFagAAFYVaagcAAIAo2rhto26fcru6Pt9ViwsX641z3tCUy6YQOgFVyO7RXp607f+/uSctVdk92O0RANwWaqkdAAAAouSTBZ+o38R+WrJ+ia475DoNP2m4mnmauV0WEBfKB4izqx0AxB6CJwAAABctXb9UN066UR/N/0j7t9hfX139lbq36e52WUDcyeycQdAEADGI4AkAAMAFpWWlGv3daN3z2T0qLSvVsBOH6dYjblXd1LpulwYAABAxBE8AAABRNnvZbF0//nr9sPwHnbrPqXq659Paq+lebpcFAAAQcQRPAAAAUbJ+63rdO/1ejf5+tFo2bKl3z3tX53c8X8YYt0sDAABwhCu72hljmhljphpjFvr+bBrkulONMQuMMYuMMQMqnB9sjCkwxszxffWMXvUAAADVY63V2F/HquPTHfXUd0+pd5fe+rXfr7pg/wsInQAAQEJzJXiSNEDSNGttO0nTfMfbMcakSnpa0mmSOkq62BjTscIlI621B/u+JkajaAAAgOr6q/Avnf3O2Tr3vXO1c4OdNeuaWXr69KeVXj/d7dIAAAAc51bwdLak13x/f01SZoBrDpO0yFr7h7V2m6R3fPcDAACIeSVlJXrs68fU8ZmOmvbnNI04eYTyrstTt926uV0aAABA1Lg142kXa+1ySbLWLjfGtAxwTYakJRWOl0qq+F9qNxhjrpCUJ+k2a+1ax6oFAACohm+Xfqus8Vn68Z8fdca+Z2j0aaO1R/oebpcFAAAQdY51PBljPjXG/BzgK9yupUADD6zvz2cl7S3pYEnLJT0Woo7rjTF5xpi8lStXVuclAAAAVMu6LevUb0I/HfHSEVq1eZU+vOBDjbtoHKETAABIWo51PFlrTwp2mzHmH2NMK1+3UytJ/wa4bKmk3Ssc7yZpme+x/6nwWC9IGh+ijuclPS9JXbt2tcGuAwAAqClrrd7/5X3dNPkm/bvpX/U/rL+GnjBUO9Xbye3SAAAAXOXWUrtxkq6UNNz358cBrvleUjtjTFtJBZIuknSJJJWHVr7rzpH0s+MVAwAABPDn2j/Vd2JfTV40WYe0OkSfXPyJurbu6nZZiLCc/AKNyF2gZYVFap3uUXaP9srsnOF2WQAAxDy3gqfhkt4zxlwj6W9J50uSMaa1pBettT2ttSXGmBsk5UpKlfSytXae7/6PGGMOlnfp3WJJWVGuHwAAJLni0mI9Nusx3T/jfqWmpOqJHk+o32H9VCfFrf+8glNy8gs0cOxcFRWXSpIKCos0cOxcSSJ8AgCgCsba5Fl91rVrV5uXl+d2GQAAIM59veRrZY3P0s///qxzOpyjUaeN0m477eZ2WXBI9+HTVVBYtMP5jHSPZg44wYWKAACILcaY2dbagC3f/C85AACAMK0tWqsBnw7Q8z88r9132l0fX/Sxzmp/lttlwWHLAoROoc4DAID/EDwBAABUwVqrt39+W7fk3qLVm1fr1sNv1ZDjh6hR3UZul4YoaJ3uCdjx1Drd40I1AADElxS3CwAAAIhli9Ys0ilvnKJLx16qPdP3VN71eXqsx2OETkkku0d7edJStzvnSUtVdo/2LlUEAED8oOMJAAAggK0lWzXi6xF64IsHVK9OPY0+bbR6d+2t1JTUqu+MhFI+QJxd7QAAqD6CJwAAgEq++OsLZY3P0vxV83V+x/P1xKlPqHXj1m6XBRdlds4gaAIAoAYIngAAAHxWb16t7KnZemXOK9ozfU9NuGSCerbr6XZZAAAAcYvgCQAAJD1rrV7/8XXdPvV2FW4p1J3d79R9x96nBmkN3C4NAAAgrhE8AQCApLZg1QL1ntBbny/+XEfsdoSeO+M5ddqlk9tlAQAAJASCJwAAkJS2lGzR8K+Ga9hXw9QgrYHGnD5G13W5TimGTX8BAAAiheAJAAAknel/Tlfv8b21cM1CXdLpEj1+yuPapdEubpcFAACQcAieAABA0li5aaVun3q7Xv/xde3ddG/lXparU/Y+xe2yAAAAEhbBEwAASHhltkyv5L+iOz69Qxu2btDdR9+tu4++W540j9ulAQAAJDSCJwAAkNB+WfmLeo/vrS///lJHtzlaY84Yo44tOrpdFgAAQFIgeAIAAAmpqLhID375oB6Z+Yga12usl856SVcdfBXDwwEAAKKI4AkAACScKb9PUd8JffX72t91xUFX6NGTH1WLhi3cLgsAACDpEDwBAICEsWLjCt2ae6ve/vlt7bvzvpp2xTSd0PYEt8sCAABIWgRPAAAg7pXZMr0w+wUNmDZAm4s3a/Cxg3XnUXeqfp36bpcGAACQ1AieAABAXJv7z1xljc/SrKWzdPyex+vZ059V++bt3S4LQBhy8gs0IneBlhUWqXW6R9k92iuzc4bbZQEAIojgCQAAxKVN2zbp/hn36/FvHld6/XS9lvmaLj/wchlj3C4NQBhy8gs0cOxcFRWXSpIKCos0cOxcSSJ8AoAEQvAEAADizsSFE9VvYj8tLlys/x38Pz1y8iPaucHObpcFoBpG5C7wh07liopLNSJ3AcETACQQgicAABA3lm1Yppsn36z3f3lf+zXfTzOumqFj9jjG7bIA1MCywqIqz7MUDwDiH8ETAACIeaVlpRqTN0Z3Tb9LW0u26oHjH1B292zVTa3rdmkAaqh1ukcFAcKn1ukeSSzFA4BEkeJ2AQAAAKHMWTFHR7x0hG6YdIO6ZXTTz31/1t3H3E3oBMS57B7t5UlL3e6cJy1V2T28mwOEWooHAIgfdDwBAICYtHHbRg36bJCe/PZJ7dxgZ73V6y1ddMBFDA8HEkR511KwpXThLMUDAMQ+gicAABBzxi0Ypxsm3qAl65coq0uWhp04TE09Td0uC0CEZXbOCLpsrqqleACA+MBSOwAAEDOWrFuic949R2e/c7aa1G+imf+bqTFnjCF0ApJQVUvxAADxgY4nAADgupKyEo3+brTu/exelZaVaviJw3XrEbcqLTXN7dIAuKSqpXgAgPhA8AQAAFyVtyxPWeOz9MPyH3TaPqfp6Z5Pq23Ttm6XBSAGhFqKBwCIDwRPAADAFeu3rte90+/V6O9Hq2XDlnrvvPd0XsfzGB4OAACQQAieAABAVFlr9dH8j9R/Un8t37BcfQ/tqwdPeFBN6jdxuzQAAABEGMETAACImr8K/9INk27Q+N/G66BdDtJHF36kwzIOc7ssAAAAOITgCQAAOK64tFhPfvukBn0+SJL02CmP6cZuN6pOCv8pAgAAkMj4rz0AAOCob5Z+o6zxWfrpn5905r5nanTP0WrTpI3bZQEAACAKCJ4AAIAjCrcU6q5pd2lM3hi1btxaYy8Yq8wOmQwPBwAASCIETwAAIKKstXpv3nu6Ofdm/bvpX93Y7UYNPX6oGtdr7HZpAAAAiDKCJwAAEDF/rP1D/Sb20+RFk9WlVReNv3i8urTu4nZZAAAAcAnBEwAAqLXi0mI9NusxDZkxRHVS6ujJU59Uv0P7KTUl1e3SAAAA4CKCJwAAUCsz/56prPFZmrdynnrt10tPnvqkdttpN7fLAgAAQAwgeAIAADWypmiNBnw6QC/88ILaNGmjcReN05ntz3S7LAAAAMQQgicAAFAt1lq9Nfct3ZJ7i9YUrdHtR9yuQccNUqO6jdwuDQAAADGG4AkAAIRt4eqF6juxrz7941N1y+imqZdP1UG7HuR2WQAAAIhRBE8AAKBKW0u26pGZj+jBLx9UvTr19HTPp5XVJYvh4QAAAAiJ4AkAAIQ0Y/EM9Z7QW/NXzdcF+1+gJ3o8oVaNW7ldFgAAAOIAwRMAAAho1eZVumPqHXplzitqm95Wky6dpFP3OdXtsgAAABBHCJ4AAMB2rLV6/cfXdduU27Ru6zoN6D5A9x57rxqkNXC7NAAAAMQZgicAAOA3f9V89ZnQR58v/lxH7n6knjvjOR3Q8gC3ywIAAECcIngCAADaUrJFw74cpuEzh6tBWgM9f8bzuuaQa5RiUtwuDQAAAHGM4AkAgCQ37Y9p6jOhjxauWahLO12qx055TLs02sXtsgAAAJAACJ4AAEhS/276V7dNuU1v/PSG9mm2j6ZcNkUn732y22UBAAAggRA8AQCQZMpsmV7Of1l3TL1DG7dt1D1H36O7jr5LnjSP26UBAAAgwRA8AQCQROb9O0+9J/TWV39/pWP2OEZjTh+j/Vrs53ZZAAAASFAETwAAJIGi4iI98MUDeuTrR7RTvZ308lkv66qDr5Ixxu3SAAAAkMAIngAASHC5i3LVd2Jf/bH2D1150JUacfIItWjYwu2yAAAAkAQIngAASFArNq7QLbm36J2f39G+O++r6VdM1/Ftj3e7LAAAACQRgicAABJMmS3T87Of14BPB6iopEhDjhuiO7vfqXp16rldGgAAAJIMwRMAAAnkp39+Utb4LH2z9Bud0PYEPXv6s9p3533dLgsAAABJiuAJAIAEsGnbJg2ZMUSPz3pcTT1N9Xrm67rswMsYHg4AAABXETwBABDnJvw2Qf0m9tNf6/7StZ2v1cMnP6xmnmZulwUAAAAQPAEAEK+WbVimmybfpA9++UAdW3TUF1d9oaP3ONrtsgAAAAA/gicAAOJMaVmpnvn+Gd09/W4VlxXrwRMe1O1H3q66qXXdLg0AAADYDsETAABxJH95vq4ff73yluXplL1P0TM9n9HezfZ2uywAAAAgIIInAADiwMZtG3XfZ/fpyW+fVIsGLfRWr7d00QEXMTwcAAAAMY3gCQCAGPfx/I91w6QbtHT9UmV1ydKwE4epqaep22UBAAAAVSJ4AgAgRi1Zt0T9J/XXxws+1gEtD9C7572rI3c/0u2yAAAAgLARPAEAEGNKykr01LdP6d7P7lWZLdPDJz2sWw6/RWmpaW6XBgAAAFQLwRMAADHk+4LvlTU+S/kr8tWzXU+NPm202jZt63ZZAAAAQI0QPAEAEAPWb12vu6fdrae/f1q7NtpV75//vs7d71yGhwMAACCuETwBAOAia60+/PVD3TT5Ji3fsFz9Du2nB054QE3qN3G7NAAAAKDWCJ4AAHDJ4sLFumHiDZqwcIIO3vVgfXThRzos4zC3ywIAAAAihuAJAIAoKy4t1hPfPKHBMwbLyOixUx7Tjd1uVJ0U/rUMAACAxMJ/4QIAEEWzlsxS1vgszf13rs5qf5aeOu0ptWnSxu2yAAAAAEcQPAEAEAWFWwo18NOBem72c2rduLU+uvAjZXbIdLssAAAAwFEETwAAOMhaq3fnvaubJ9+slZtX6qZuN+n+4+9X43qN3S4NAAAAcBzBEwAADvl9ze/qO7Gvpvw+RV1addHESyfqkFaHuF0WAAAAEDUETwAARNi20m169OtHNfSLoUpLSdOoU0ep76F9lZqS6nZpAAAAQFQRPAEAEEFf/f2VssZn6ZeVv+jc/c7Vk6c+qYydMtwuCwAAAHAFwRMAABGwpmiN7px6p17Mf1FtmrTRJxd/ojP2PcPtsgAAAABXETwBAFAL1lq9OfdN3Zp7q9YUrdHtR9yuwccNVsO6Dd0uDQAAAHAdwRMAADX02+rf1HdCX037c5q6ZXTT1Mun6qBdD3K7LAAAACBmEDwBAFBNW0u26uGZD+uhLx9S/Tr19UzPZ3R9l+sZHg4AAABUQvAEAEA1fL74c/Ue31sLVi/QhftfqJE9RqpV41ZulwUAAADEJIInAADCsGrzKt0+5Xa99uNrapveVpMunaRT9znV7bIAAACAmEbwBABACNZavTrnVWVPzda6res08KiBuueYe9QgrYHbpQEAAAAxj+AJAIAg5q+ar97je2vGXzPUfffuGnPGGB3Q8gC3ywIAAADiBsETAACVbCnZooe+fEjDvxquhnUb6vkzntc1h1yjFJPidmkAAABAXCF4AgCggk//+FR9JvTRojWLdGmnS/XYKY9pl0a7uF0WAAAAEJcIngAAkPTvpn91a+6tenPum9qn2T6aevlUnbTXSW6XBQAAAMQ1gicAQFIrs2V66YeXdMend2jTtk2695h7ddfRd6l+nfpulwYAAADEPYInAEDS+vnfn9V7fG/NXDJTx+xxjMacPkb7tdjP7bIAAACAhEHwBABIOpuLN+uBLx7QiK9HqEm9Jnrl7Fd05UFXyhjjdmkAAABAQiF4AgAklcmLJqvvhL76s/BPXXXwVRpx8gg1b9Dc7bIAAACAhETwBABICss3LNctubfo3Xnvqv3O7fXZlZ/puD2Pc7ssAAAAIKERPAEAElqZLdNzec9p4LSB2lKyRUOOG6I7u9+penXquV0aAAAAkPAIngAACeunf35S1vgsfbP0G53Q9gQ9e/qz2nfnfd0uCwAAAEgaBE8AgISzadsmDZkxRI/PelzNPM30f+f8ny7tdCnDwwEAAIAoI3gCACSU8b+N1w0Tb9Bf6/7StZ2v1cMnP6xmnmZulwUAAAAkJYInAEBCKFhfoJsm36QPf/1QHVt01JdXf6mj2hzldlkAAABAUiN4AgDEtdKyUj3z/TO6e/rdKi4r1kMnPKTbjrxNdVPrul0aAAAAkPQIngAAceuH5T8oa3yW8pblqcfePfR0z6e1d7O93S4LAAAAgA/BEwAg7mzYukH3fXafRn03Si0atNDb576tC/e/kOHhAAAAQIwheAIAxJWc+TnqP6m/CtYXKKtLloadNEzp9dPdLgsAAABAAARPAIC4sGTdEvWf1F8fL/hYB+5yoN4//30dvtvhbpcFAAAAIASCJwBATCspK9Gob0fpvs/uk5XVIyc9opsPv1lpqWlulwYAAACgCgRPAICY9X3B97p+/PWas2KOTm93ukb3HK090/d0uywAAAAAYSJ4AgDEnHVb1ume6ffo6e+fVqvGrfTB+R+o1369GB4OAAAAxBmCJwBAzLDW6sNfP9SNk27Uio0rdMNhN+iBEx7QTvV2crs0AAAAADVA8AQAiAmLCxer38R+mrhwojrv2lkfX/SxDs041O2yAAAAANQCwRMAwFXFpcUa+c1IDf58sFJMih4/5XH179ZfdVL4VxQAAAAQ7/ivegCAa2YtmaWs8Vma++9cZXbI1KhTR2n3Jru7XRYAAACACCF4AgBE3dqitRo4baCen/28MnbKUM6FOTq7w9lulwUAAAAgwgieAABRY63VOz+/o1tyb9HKzSt18+E3a8hxQ9S4XmO3SwMAAADgAIInAEBU/L7md/Wd2FdTfp+irq27auKlE3VIq0PcLgsAAACAgwieAACO2la6TY9+/aiGfjFUaSlpeuq0p9Snax+lpqS6XRoAAAAAhxE8AQAc8+VfX6r3hN76ZeUvOq/jeXqixxPK2CnD7bIAAAAARAnBEwAg4tYUrdEdU+/QS/kvaY8me2j8xeN1+r6nu10WAAAAgCgjeAIARIy1Vm/89IZum3KbN3w68g7dd+x9ali3odulAQAAAHABwRMAICJ+W/2b+kzoo+l/Ttfhux2uT8/4VAfucqDbZQEAAABwEcETAKBWtpZs1fCvhuuhrx6Sp45Hz57+rK7vcr1STIrbpQEAAABwGcETAKDGPl/8uXqP760FqxfoogMu0sgeI7Vro13dLgsAAABAjCB4AgBU26rNq3T7lNv12o+vaa+me2nypZPVY58ebpcFAAAAIMYQPAEAwmat1atzXtXtU2/X+q3rdddRd+meY+6RJ83jdmkAAAAAYhDBEwAgLL+u/FW9J/TWF399oaPaHKUxp4/R/i33d7ssAAAAADGM4AkAEFJRcZEe+vIhPTzzYTWq20gvnvmiru58NcPDAQAAAFSJ4AkAENSnf3yqPhP6aNGaRbr8wMv16CmPqmXDlm6XBQAAACBOEDwBAHbwz8Z/dOuUW/XW3LfUrlk7fXr5pzpxrxPdLgsAAABAnCF4AgD4ldkyvfjDi7rz0zu1uXiz7jvmPg08eqDq16nvdmkAAAAA4hDBEwBAkvTzvz8ra3yWvl7ytY7d41iNOWOMOjTv4HZZAAAAAOIYwRMAJLnNxZs1dMZQPTrrUTWp10Svnv2qrjjoChlj3C4NAAAAQJwjeAKAJDZp4ST1m9hPfxb+qasPvlqPnPyImjdo7nZZAAAAABIEwRMAJKHlG5br5tyb9d6899SheQd9fuXnOnbPY90uCwAAAECCIXgCgCRSWlaq52Y/p4HTBmpryVYNPX6oso/MVr069dwuDQAAAEACIngCgCQxZ8UcZY3P0ncF3+mkvU7SMz2fUbud27ldFgAAAIAERvAEAAlu47aNGvz5YD3xzRPaucHOeuOcN3RJp0sYHg4AAADAcQRPAJDAPlnwiW6YdIP+Xve3rjvkOg0/abiaeZq5XRYAAACAJEHwBAAJaOn6pbpp8k0a++tY7d9if3119Vfq3qa722UBAAAASDIETwCQQErLSvX090/r7ul3q7SsVP/f3n2H2VXW6+N+3oQQeq+hizRFekekFwEPCAcRhC+oRyahBZAqiPRipEsJx4p6kEPHJARC6E1AakB6kSq9h5Dy/v7IxF/kJEwSMlkzmfu+rrlml7X3fq6Bz2TWs9d698mbnpyD1j0oM3afseloAABAF6R4AphO/O2Vv6VlQEv+9urfstWXt8q5W5+bL839paZjAQAAXZjiCaCT+2DEB/npTT/NOfeckwVmXSCX/Ocl2ekrO1k8HAAAaJziCaCTqrXmqsevyn7X7pdXPnglfdbokxM3PTFzzTRX09EAAACSKJ4AOqV/vPeP7Dto3/zlyb9kpQVXyuXfuTxrL7p207EAAAD+jeIJoBMZNWZUzrr7rPzs5p+lpqbf5v3Sd+2+6dG9R9PRAAAA/g/FE0Ancc/L96RlQEsefO3BbLPMNjl363OzxFxLNB0LAABgohRPAB3ce5+8lyNvPDLn3XteFp594Vy202XZYYUdLB4OAAB0eIongA6q1prLHrssfQf3zWsfvpZ919o3J2xyQuboOUfT0QAAACaJ4gmgA3runeeyz6B9cu3T12a1hVfLNbtckzV6rdF0LAAAgMmieALoQEaOHpnT7zo9x95ybLp3654ztjwj+661b2bo5tc1AADQ+diTAegg7nzxzrQMaMmw14dl++W3z9lbnZ3F5lys6VgAAABTTPEE0LB3hr+Tw284PBfef2EWm2OxXLXzVdlu+e2ajgUAAPCFKZ4AGlJrzcXDLs6B1x2YNz9+Mwetc1CO3fjYzDbjbE1HAwAAmCoUTwANePrtp7P3wL0z5NkhWbPXmhn8vcFZdeFVm44FAAAwVSmeAKahT0d/mn539Mvxtx6fGbvPmHO+eU76rNEn3bt1bzoaAADAVKd4AphGbn3h1vQe0Dt/f/Pv2ekrO+XMrc5Mr9l7NR0LAACg3SieANrZWx+/lUOHHJrfPPibLDHnEhm468BsvczWTccCAABod4ongHZSa80fHv5Dfnz9j/PO8Hdy6HqH5ugNj86sM87adDQAAIBpQvEE0A6eePOJ9BnYJzc9f1PWWXSd9N+2f1ZacKWmYwEAAExTiieAqeiTUZ/klNtPycm3n5yZZ5g5F2xzQX60+o/SrXRrOhoAAMA0p3gCmEpueu6m9B7YO0++9WR2WXGXnL7l6VlotoWajgUAANAYxRPAF/TGR2/k4CEH56KHLsqX5v5Srtvtumyx9BZNxwIAAGic4glgCo2pY/LbB36bQ284NB+M+CBHbnBkjtzgyMzcY+amowEAAHQIiieAKfDYG4+l94Deue0ft+Xri389/bftn6/M/5WmYwEAAHQoiieAyTB85PCceNuJ+fkdP89sM86WX33rV/n+qt+3eDgAAMAEKJ4AJtH1z1yfvQfunWfeeSa7r7R7frHFL7LArAs0HQsAAKDDauQt+lLKPKWUIaWUp1q/zz2R7X5TSnm9lDJsSh4PMDW89uFr2fXyXbPlH7dMt9ItQ//f0Fz07YuUTgAAAG1o6tyQw5MMrbUuk2Ro6/UJ+V2Srb7A4wGm2Jg6Jv3v658Vzl0hl//98vxsw5/l4T4PZ5OlNmk6GgAAQKfQ1Kl22yXZqPXy75PcnOSwz25Ua721lLLklD4eYEo98s9H0jKgJXe9dFc2WnKjXLDNBVluvuWajgUAANCpNFU8LVhrfTVJaq2vllIm93yVL/p4gAn66NOPctwtx+X0u0/PnD3nzO+3/312X2n3lFKajgYAANDptFvxVEq5IclCE7jryPZ6zYnk2CvJXkmy+OKLT8uXBjqZQU8Nyj6D9snz7z6fH6zyg/x8859n3lnmbToWAABAp9VuxVOtdbOJ3VdK+WcpZeHWo5UWTvL6ZD79JD++1nphkguTZI011qiT+TpAF/DKB6/kgMEH5NLHLs3y8y2fW/a8Jd9Y4htNxwIAAOj0mlpc/Joke7Re3iPJ1dP48QAZPWZ0zr3n3Kxw7gq55olrcvzGx+fBlgeVTgAAAFNJU8XTKUk2L6U8lWTz1usppfQqpQwat1Ep5eIkdyVZrpTyUinlh5/3eIBJ9eBrD2bdX6+bfa/dN2stslaG7T0sR33jqPScoWfT0QAAAKYbjSwuXmt9K8mmE7j9lSRbj3d9l8l5PEBbPvz0wxxz8zE58+4zM+8s8+ZPO/wpu6y4i8XDAQAA2kFTn2oHMM395Ym/ZJ9B++TF91/MXqvtlVM2OyVzzzx307EAAACmW4onYLr30vsvZf9r98+Vj1+ZFRdYMRfveHHWX3z9pmMBAABM9xRPwHRr9JjR+eU9v8xRNx2V0WNG55RNT8lB6x6UHt17NB0NAACgS1A8AdOlv73yt+w1YK/c/+r92erLW+W8rc/LUnMv1XQsAACALkXxBExX3h/xfn5640/zy3t/mQVmXSCX/Ocl2ekrO1k8HAAAoAGKJ2C6UGvNlY9fmf2v3T+vfPBK+qzRJydtelLmnGnOpqMBAAB0WYonoNN74d0Xst+1++UvT/4lKy+4ci7/zuVZe9G1m44FAADQ5SmegE5r1JhROevus3L0zUcnSX6x+S/Sd52+maGbX20AAAAdgb0zoFP660t/TcuAljz0z4fyrWW/lXO+eU6WmGuJpmMBAAAwHsUT0Km898l7+cnQn+T8+85Pr9l75YrvXJHtl9/e4uEAAAAdkOIJ6BRqrbn0sUvTd3DfvP7R69l/7f1z/MbHZ/aeszcdDQAAgIlQPAEd3nPvPJe9B+2dwU8PzmoLr5YBuwzI6r1WbzoWAAAAbVA8AR3WyNEjc9pdp+W4W45L927dc+aWZ2aftfaxeDgAAEAnYe8N6JDufPHOtAxoybDXh+Xby387Z3/z7Cw6x6JNxwIAAGAyKJ6ADuWd4e/k8BsOz4X3X5jF51w813z3mnxruW81HQsAAIApoHgCOoRaay4ednEOvO7AvPXxW/nxuj/OMRsdk9lmnK3paAAAAEwhxRPQuKfffjp9BvbJDc/ekLUWWSvX7XZdVllolaZjAQAA8AUpnoDGjBg1Iv3u7JcTbj0hPWfomXO3Pjctq7eke7fuTUcDAABgKlA8AY249YVb0zKgJY+/+Xi+89Xv5Iwtz0iv2Xs1HQsAAICpSPEETFNvffxWDhlySH774G+z5FxLZtCug/LNZb7ZdCwAAADageIJmCZqrbnooYty8JCD8+4n7+aw9Q/L0RsenVl6zNJ0NAAAANqJ4glod0+8+UR6D+ydm5+/Oesttl4u2OaCfG3BrzUdCwAAgHameALazSejPskpt5+Sk28/ObP0mCX9t+2f/1rtv9KtdGs6GgAAANOA4gloFzc+d2N6D+idp95+Krt+bdecvsXpWXC2BZuOBQAAwDSkeAKmqjc+eiM/vv7H+cPDf8jScy+d63e7PpsvvXnTsQAAAGiA4gmYKsbUMfntA7/NIUMOyYeffpijNjgqP9ngJ5m5x8xNRwMAAKAhiifgC3vsjcfSMqAlt//j9myw+Abpv23/rDD/Ck3HAgAAoGGKJ2CKDR85PCfcekL63dkvs/ecPb/+j19nz1X2tHg4AAAASRRPwBS6/pnr02dgnzz7zrPZY+U90m/zfpl/1vmbjgUAAEAHongCJstrH76Wg647KBcPuzjLzrtsbvx/N2bjpTZuOhYAAAAdkOIJmCRj6phc+LcLc/gNh2f4qOE5ZsNjcvjXD0/PGXo2HQ0AAIAOSvEEtOmRfz6SlgEtueulu7Lxkhvn/G3Oz3LzLdd0LAAAADo4xRMwUR99+lGOu+W4nHbXaZl75rlz0fYXZbeVdksppeloAAAAdAKKJ2CCBj01KHsP3DsvvPdCfrjqD3PqZqdm3lnmbToWAAAAnYjiCfg3r3zwSvoO7pvLHrssK8y3Qm7d89ZssMQGTccCAACgE1I8AUmS0WNG5/z7zs9Phv4kI8eMzImbnJiD1zs4M3afseloAAAAdFKKJyAPvPpAWga05N5X7s0WS2+R87Y+L0vPs3TTsQAAAOjkFE/QhX346Yc5+qajc9Zfz8r8s8yf/9nhf/LdFb9r8XAAAACmCsUTdFFXP3519rt2v7z4/otpWb0lJ296cuaeee6mYwEAADAdUTxBF/Piey9m/8H756rHr8qKC6yYP//nn7PeYus1HQsAAIDpkOIJuohRY0bll/f8Mj+96acZPWZ0Tt3s1By4zoHp0b1H09EAAACYTimeoAu475X7stdf9soDrz2QrZfZOr/85i+z1NxLNR0LAACA6ZziCaZj7494P0fdeFTOvffcLDjrgrl0p0uz4wo7WjwcAACAaULxBNOhWmuu+PsV2X/w/nn1g1ezz5r75IRNTsicM83ZdDQAAAC6EMUTTGeef/f57Dto3wx8amBWWWiVXLnzlVlrkbWajgUAAEAXpHiC6cTI0SNz5t1n5phbjklJyWlbnJb9194/M3Qz5gAAADTDHilMB+5+6e60DGjJw/98OP+x3H/knG+ek8XnXLzpWAAAAHRxiifoxN795N38ZOhPcsF9F6TX7L1y5c5XZvvlt286FgAAACRRPEGnVGvN/z76vzngugPy+kevp+/afXPcxsdl9p6zNx0NAAAA/kXxBJ3Ms+88m70H7p3rnrkuqy+8egbuOjCrLbxa07EAAADg/1A8QSfx6ehPc9qdp+W4W4/LDN1myFlbnZV91twn3bt1bzoaAAAATJDiCTqB2/9xe3oP6J1H33g0O6ywQ87a6qwsOseiTccCAACAz6V4gg7s7eFv57Ahh+VXD/wqi8+5eK757jX51nLfajoWAAAATBLFE3RAtdb86ZE/5aDrDsrbw9/OwesenJ9t9LPMNuNsTUcDAACASaZ4gg7mqbeeSp+BfTL0uaFZe5G1M2T3IVl5oZWbjgUAAACTTfEEHcSIUSPy8zt+nhNvOzE9Z+iZc7c+Ny2rt1g8HAAAgE5L8QQdwC3P35KWAS154q0n8p2vfidnbnlmFp594aZjAQAAwBeieIIGvfnxmzlkyCH53YO/y1JzLZVrv3dttvryVk3HAgAAgKlC8dTJXPXAy+l33RN55d3h6TXXzDlky+Wy/aqLNB2LyVRrze8f+n0Ovv7gvDfivRy+/uH56YY/zSw9Zmk6GgAAAEw1iqdO5KoHXs4RVzyS4SNHJ0lefnd4jrjikSRRPnUij7/5eHoP6J1bXrgl6y22Xvpv2z8rLrBi07EAAABgquvWdAAmXb/rnvhX6TTO8JGj0++6JxpKxOT4ZNQnOfqmo7PS+SvloX8+lAu3vTC3ff82pRMAAADTLUc8dSKvvDt8sm6n4xj67ND0GdgnT739VL73te/ltC1Oy4KzLdh0LAAAAGhXjnjqRHrNNfNk3U7zXv/o9ex+5e7Z7A+bpabm+t2uzx93+KPSCQAAgC5B8dSJHLLlcpm5R/d/u23mHt1zyJbLNZSIiRlTx+RX9/8qy/9y+Vwy7JIctcFRebj3w9l86c2bjgYAAADTjFPtOpFxC4j7VLuO7dHXH03LgJbc8eId+cYS38gF21yQFeZfoelYAAAAMM0pnjqZ7VddRNHUQX088uOccOsJ6Xdnv8zRc4785j9+kz1X2TOllKajAQAAQCMUTzAVDH56cPYeuHeee/e57LHyHum3eb/MP+v8TccCAACARime4At49YNXc+B1B+aSRy/JsvMumxv/343ZeKmNm44FAAAAHYLiCabAmDom/e/rnyOGHpHho4bn2I2OzWHrH5aeM/RsOhoAAAB0GIonmEwP//PhtAxoyd0v3Z1Nltok529zfpadd9mmYwEAAECHo3iCSfTRpx/l2FuOzel3nZ65Z547F21/UXZbaTeLhwMAAMBEKJ5gEgx4ckD2HbRvXnjvhfzXqv+VUzc/NfPMPE/TsQAAAKBDUzzB53j5/ZfTd3DfXP73y/OV+b+SW/e8NRsssUHTsQAAAKBTUDzBBIweMzrn3XtejrzxyIwcMzInbnJiDl7v4MzYfcamowEAAECnoXiCz7j/1fvTMqAl971yX7ZYeouct/V5WXqepZuOBQAAAJ2O4glafTDigxx909E5+56zM/8s8+fiHS/Ozl/d2eLhAAAAMIUUT5Dkqsevyn7X7peX3n8pvVfvnZM3OzlzzTRX07EAAACgU1M80aW9+N6L2e/a/XL1E1fnawt8Lf/7n/+bdRdbt+lYAAAAMF1QPNEljRozKuf89Zz89KafZkwdk59v9vMcsM4B6dG9R9PRAAAAYLqheKLLuffle9MyoCUPvPZAtl5m65y79blZcq4lm44FAAAA0x3FE13G+yPez5FDj8y5956bhWZbKJfudGl2XGFHi4cDAABAO1E8Md2rtebyv1+evoP75tUPXs0+a+6TEzY5IXPONGfT0QAAAGC6pnhiuvb8u89n30H7ZuBTA7PKQqvkyp2vzFqLrNV0LAAAAOgSFE9Ml0aOHpkz7z4zx9xyTEpKTt/i9Oy39n6ZoZv/5QEAAGBasRfOdOeuF+9Ky4CWPPL6I9luue1y9jfPzuJzLt50LAAAAOhyFE9MN9795N0cccMR6f+3/llkjkVy5c5XZvvlt286FgAAAHRZiic6vVprLnn0khww+IC88fEbOWCdA3LsRsdm9p6zNx0NAAAAujTFE53aM28/k70H7Z3rn7k+a/RaI4O+NyirLbxa07EAAACAKJ7opD4d/Wl+cecvcvytx6dHtx45e6uzs/eae6d7t+5NRwMAAABaKZ7odG7/x+1pGdCSx954LDuusGPO2uqsLDLHIk3HAgAAAD5D8USn8fbwt3PYkMPyqwd+lcXnXDx/2eUv2XbZbZuOBQAAAEyE4okOr9aaPz3ypxx03UF5e/jbOWS9Q/KzDX+WWWecteloAAAAwOdQPNGhPfnWk9l74N4Z+tzQrL3I2hmy+5CsvNDKTccCAAAAJoHiiQ5pxKgROfWOU3PSbSdlphlmyvnbnJ+9Vt8r3Uq3pqMBAAAAk0jxRIdz8/M3p/eA3nnirSfy3RW/mzO2PCMLzbZQ07EAAACAyaR4osN48+M3c/D1B+f3D/0+S821VAZ/b3C2/PKWTccCAAAAppDiicbVWvO7B3+XQ4YckvdGvJcjvn5EjvrGUZmlxyxNRwMAAAC+AMUTjXr8zcfTe0Dv3PLCLVl/sfXTf9v++eoCX206FgAAADAVKJ5oxCejPslJt52UU24/JbPNOFv++1v/nR+s+gOLhwMAAMB0RPHENHfDszekz8A+efrtp7PbSrvltC1OywKzLtB0LAAAAGAqUzwxzbz+0es56LqD8qdH/pQvz/PlDNl9SDb70mZNxwIAAADaieKJdjemjsmv7/91Dr3h0Hz06Uc5+htH54gNjshMM8zUdDQAAACgHSmeaFfDXh+W3gN6544X78iGS2yYC7a9IMvPt3zTsQAAAIBpQPFEu/h45Mc5/pbj84u7fpE5e86Z32732+yx8h4ppTQdDQAAAJhGFE9MdYOfHpy9B+6d5959Lnuusmf6bd4v880yX9OxAAAAgGlM8cRU8+oHr+bA6w7MJY9ekuXmXS437XFTNlpyo6ZjAQAAAA1RPPGFjalj0v++/jl86OEZMWpEjtvouBy6/qHpOUPPpqMBAAAADVI88YU89NpDaRnQkr++/NdsutSmOX+b87PMvMs0HQsAAADoABRPTJGPPv0ox9x8TM64+4zMM/M8+eO3/5hdv7arxcMBAACAf1E8MdkGPDkg+wzaJ/947x/50Wo/yimbnZJ5Zp6n6VgAAABAB6N4YpK9/P7L2X/w/rni71fkq/N/Nbd9/7Z8ffGvNx0LAAAA6KAUT7Rp9JjROffec3PUjUdl5JiROWmTk/Lj9X6cGbvP2HQ0AAAAoANTPPG57n/1/rQMaMl9r9yXLZfeMudtc16+NPeXmo4FAAAAdAKKJybogxEf5Oibjs7Z95ydBWZdIH/e8c/5zle/Y/FwAAAAYJIpnvg/rnr8qux37X55+f2X03uN3jlp05My10xzNR0LAAAA6GQUT/zLP977R/a7dr9c88Q1WWnBlXLpTpdmnUXXaToWAAAA0EkpnsioMaNy9l/PztE3HZ2amn6b90vftfumR/ceTUcDAAAAOjHFUxd3z8v3pGVASx587cFss8w2OXfrc7PEXEs0HQsAAACYDiieuqj3PnkvR954ZM6797wsPPvCuWyny7LDCjtYPBwAAACYahRPXUytNZc9dln6Du6b1z58LfuutW9O2OSEzNFzjqajAQAAANMZxVMX8vy7z2efQftk0FODstrCq+WaXa7JGr3WaDoWAAAAMJ1SPHUBI0ePzBl3n5Fjbj4m3bt1zxlbnpF919o3M3Tznx8AAABoP5qH6dxdL96VlgEteeT1R7L98tvn7K3OzmJzLtZ0LAAAAKALUDxNp94Z/k6OGHpE+v+tfxabY7FctfNV2W757ZqOBQAAAHQhiqfpTK01fx725xxw3QF58+M3c9A6B+XYjY/NbDPO1nQ0AAAAoItRPE1Hnnn7mfQZ2CdDnh2SNXutmcHfG5xVF1616VgAAABAF6V4mg58OvrT9LujX0647YT06NYj53zznPRZo0+6d+vedDQAAACgC1M8dXK3vXBbWga05O9v/j07fWWnnLnVmek1e6+mYwEAAAAonjqrtz5+K4fdcFh+/cCvs8ScS2TgrgOz9TJbNx0LAAAA4F8UT51MrTV/ePgP+fH1P847w9/JoesdmqM3PDqzzjhr09EAAAAA/o3iqZN55p1n8sNrfpg1eq2R/tv2z0oLrtR0JAAAAIAJUjx1Ml+e58u5/fu3Z81F1ky30q3pOAAAAAATpXjqhNZedO2mIwAAAAC0ySEzAAAAALQLxRMAAAAA7ULxBAAAAEC7UDwBAAAA0C4UTwAAAAC0C8UTAAAAAO1C8QQAAABAu1A8AQAAANAuFE8AAAAAtAvFEwAAAADtQvEEAAAAQLtQPAEAAADQLhRPAAAAALQLxRMAAAAA7ULxBAAAAEC7UDwBAAAA0C4UTwAAAAC0C8UTAAAAAO1C8QQAAABAu1A8AQAAANAuFE8AAAAAtAvFEwAAAADtQvEEAAAAQLtQPAEAAADQLhRPAAAAALQLxRMAAAAA7ULxBAAAAEC7UDwBAAAA0C4UTwAAAAC0i0aKp1LKPKWUIaWUp1q/zz2R7X5TSnm9lDLsM7cfU0p5uZTyYOvX1tMmOQAAAACTqqkjng5PMrTWukySoa3XJ+R3SbaayH1n1FpXaf0a1A4ZAQAAAPgCmiqetkvy+9bLv0+y/YQ2qrXemuTtaZQJAAAAgKmoqeJpwVrrq0nS+n2BKXiOfUspD7eejjfBU/UAAAAAaE67FU+llBtKKcMm8LXdVHj685MsnWSVJK8mOe1zcuxVSrmvlHLfG2+8MRVeGgAAAIBJUWqt0/5FS3kiyUa11ldLKQsnubnWutxEtl0yyYBa64pTcv9ntn0jyQuTGHO+JG9O4rbQVZkTaJs5gbaZE2ibOYG2mZPmLFFrnX9Cd8wwrZO0uibJHklOaf1+9eQ8uJSy8LhT9ZJ8O8mwz9t+nIn9ECbyGvfVWteYnFzQ1ZgTaJs5gbaZE2ibOYG2mZOOqak1nk5Jsnkp5akkm7deTymlVynlX59QV0q5OMldSZYrpbxUSvlh610/L6U8Ukp5OMnGSQ6ctvEBAAAAaEsjRzzVWt9KsukEbn8lydbjXd9lIo/fvf3SAQAAADA1NHXEU2dwYdMBoBMwJ9A2cwJtMyfQNnMCbTMnHVAji4sDAAAAMP1zxBMAAAAA7ULxBAAAAEC7UDwBAAB0YKUU+21Ap+UX2ASUVk3ngI7MjAAATBu11jFNZ4COzv5Jx2Vx8Ta0vrtQqx8UTFQppYybkfEvA0BbSindk4zxbwf8X6WUdZP8V5IXk9yU5Ola68ut9/mbC5KUUmastX463nWz0cEonj6jlLJekuWSXD/ul/p493XzbgMkpZSlknw9Sc8kf6m1/rPhSNDhlFIWTLJRkhmS/K3W+niziaBja32zr9RaRzedBTqCUsq3kxyW5Pwk6ydZLMnHSW5McoFZgaSUslaSHZLcm+ThJM/YZ+94FE+fUUq5OsmqSe5P8k6S/8nYX/If1FovbTIbdBSllMuTvJlk5STXJ/lrknmTfJTkKn8IQVJK+XOSMUlmTbJgkmNqrYNb7+tRax3ZZD7oCEopJyZ5PcnFtdbXP3PfrEk+9q41XVUp5YIkD9Ra+7denyHJVkkOSPJGkt38zUVXV0q5IcksGVvIzpTk5SRPJLk5yVeS7FxrPaSxgCQZ+y4s/+74JHsmuTrJ0kl2TrJjkmtLKa8muVODSldWSlk0yZK11h1brz+dZOEkryZZLcl7SW5oLiE0r5SyWJIVa60rtl7fKcn3Sil31lrfT7JHKeXGWuuzjQaFBpVSFs/YHehrkvywlPJMkkuSXF1rHZ6xpxfdlLHvYENXdF+Sb5dS7k8yrHUuBiQZ0Pom4EZJhjaYDxrVeqr2U0n+N2PL2DWTfDnJl5J8LcluSQY3FpB/ccTTBJRSDkyySq11j1LK2kkuTXJexu5U7zb++aPQ1ZRSDkiycq31+6WUbyY5o9a6fOt9uybZIskPFLR0ZaWUHyXZqNb6vdZ3qJPkiiR/qLVeWkp5KslKrTsR0CWVUrZPsn2tdc9SypJJtk7yrYx9M+ORJN9OskCt9ePGQkLDWvdLlsrYo8sfSjI6Y8/KuDPJxrXWFxqMB40rpcybZESt9cPW67MnWTHJKklOTbLCZ5fQYdpTPE1EKeWkJE9m7PnUH9VaDyilLFprfanhaNCoUsosSWartb5eSpk5yaK11qda79slybdrrd9pNCQ0rJSySMaepn1frXVU621bJvl+kseTLFZr/WGDEaFxrZ8+tGSSV2qtI1pvmzFjT92+OMlb446uha5m3OLIpZQ5M/bsiy2TdE/yVsYWUffVWn/SZEboaD7zgUdbJDl93NHnNEvx9Bnj/ZKfK8n+SX6QZMta6xNWx4fPV0q5LcnJtdZBTWeBpo3/CSvjPpyilPKLJAcl2bzW6vQI+Izx/g67Nsn5tdZrms4ETZjQfkcpZfmMXTfw8SQjnYVBVzfe31clGftR9K23d8/Y9Z4WrrU+3WRGxrLG02eM+5+11vpuKeWKJC+2lk4WgoWJaP1lv0SSu5ROMNZndgjG7Tz8OmPXSFM6wQS0lk7dk/xO6URXNqE3u306Kvy7cUt7TGBextRaP0qidOogHPE0ntad52JtGpi4z86JIwHh//LvCbTNnMCElVLWTLJ8kh6tN91da32s9b71ksxTax3QVD7oCMxJ59Kt6QAdSR1r3M70DKWUHq2XTyqlzNFsOugYPjMn3dP6e6SUcoI5gbE+Oyets5JSyonmBMb6nDk5pXVdG+hySilrJOmXZNskCyVZNknfUsrBpZSZMvb0oScbjAiNm8Q5earBiHyGU+2SlFKWzdiPW1wvyR211ivGWwy2Z5K/t378NXRZE5mT0a33zZTkSXNCVzcJc/KEOaGrm4Q5ebTW+l6TGaFBP0oytNZ6fOuncy2YsTvV2yY5rtZ6aKPpoGMwJ51Mlz/iqfUTui5LsmqSN5McWUp5o5Tyq1LKsrXWEbXWPzSbEpo1CXPySa31omZTQrPMCbRtEufE3110ZdcnWaqUsnCt9YNa69Ot62f+NMlXSymbN5wPOgJz0sl0+TWeSil7JNmh1rrdeLctkWS/JLMl6TvuI36hqzIn0DZzAm0zJ/D5Wk/HPivJvEnuTXJHxn54y/BSytNJvltrva/JjNA0c9L5dPkjnpK8kuS9UkqvcTfUWl+otR6cpHuSvo0lg47DnEDbzAm0zZzA56i1vl9r/X6SM5OMSbJrkttLKdcnucXONJiTzqjLr/FUax1SSlk/yWWllKuTXDDeugLzJHmruXTQMZgTaJs5gbaZE5g0tdYbSyl3ZuwRHd2TzJfkkWZTQcdiTjqPLn+q3TillC2SHJqxaw7ck+SFJF9Osm2t9ZMms0FHYU6gbeYE2mZOAKDr6PLFUymlZOzPYUwpZd0kH2fsRzK+neShWuunjQaEDsCcQNvMCbTNnABA19Pli6dxWv8QejbJGrVWh3nDBJgTaJs5gbaZEwDoOrr84uKllHE/g22TDKu1vlVK6fJrX8H4zAm0zZxA28wJAHQ9Xb54Gs9uSS5pvewwMJgwcwJtMyfQNnMCAF2EU+2SlFJmT3J7kjWtLQATZk6gbeYE2mZOAKBr6dJHPLWuL5CMfdft0Vrrp+MdAg7EnMCkMCfQNnMCAF2TI56SlFLmSzJbrfX5Ukq3WuuYpjNBR2NOoG3mBNpmTgCga1E8AQAAANAuHN4MAAAAQLtQPAEAAADQLhRPAAAAALQLxRMAAAAA7ULxBADQhlLKkaWUR0spD5dSHiylrN16+wGllFmm8DmPKaUc3MZrPtj6NXq8y/uXUn5VSvnKlD43AMC0MkPTAQAAOrJSyrpJtk2yWq11RCllviQztt59QJI/Jvl4ar9urfXEJCe2Zviw1rrK1H6NCSmldK+1jp4WrwUATP8c8QQA8PkWTvJmrXVEktRa36y1vlJK2T9JryQ3lVJuSpJSyi6llEdKKcNKKaeOe4JSylallPtLKQ+VUoZ+9gVKKT8qpVxbSpl5UgKVUm4upawxuc9dStmtlHJP65FT/Usp3Vu3+bCUclwp5a9J1p38HxEAwIQpngAAPt/1SRYrpTxZSjmvlLJhktRaz07ySpKNa60bl1J6JTk1ySZJVkmyZill+1LK/En+O8mOtdaVk+w0/pOXUvZN8q0k29dah09OsMl57iRLJtk5yfqtR0+NTvK91k1nTTKs1rp2rfX2yckAAPB5nGoHAPA5aq0fllJWT7JBko2TXFJKObzW+rvPbLpmkptrrW8kSSnlT0m+kbEFz6211udan+/t8R6ze5KXMrZ0GjkF8daZ1OcupWyaZPUk95ZSkmTmJK+3bjs6yeVT8PoAAJ9L8QQA0IbWNY9uTnJzKeWRJHsk+d1nNisTeXhJUidy37CMPTpq0STPTUG0yXnukuT3tdYjJrDtJ9Z1AgDag1PtAAA+RylluVLKMuPdtEqSF1ovf5Bk9tbLf02yYSllvta1k3ZJckuSu1pvX6r1+eYZ77keSNKS5JrWU/Um1+Q899Ak/1lKWWDctqWUJabgNQEAJpkjngAAPt9sSc4ppcyVZFSSp5Ps1XrfhUmuLaW82rrO0xFJbsrYo4sG1VqvTpJSyl5JriildMvY09s2H/fktdbbSykHJxlYStm81vrmpAartb4xqc/devtRSa5v3XZkkn3y/5doAABTXal1YkdnAwAAAMCUc6odAAAAAO1C8QQAAABAu1A8AQAAANAuFE8AAAAAtAvFEwAAAADtQvEEAAAAQLtQPAEAAADQLhRPAAAAALSL/w91fObam8kZzwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1440x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def graph_corr(hero_stock, most_correlated_stock):\n",
    "    hero = filtered_ror_df[f'{max_beta_stock} Daily Rate of Return']\n",
    "    most_correlated = filtered_ror_df[f'{max_deviation_portfolio[-1]} Daily Rate of Return']    \n",
    "    plt.figure(figsize = (20,15))\n",
    "    plt.scatter(hero, most_correlated)\n",
    "    a, b = np.polyfit(hero, most_correlated, 1)\n",
    "    plt.plot(hero, a*(hero)+b, color='green', linestyle='-')\n",
    "    plt.title('Correlation between Hero Stock vs Most Correlated Stock') \n",
    "    plt.xlabel('Stock Ticker') \n",
    "    plt.ylabel('Daily Rate of Returns')\n",
    "    plt.xticks(rotation=70)\n",
    "    \n",
    "    #Displaying the plot\n",
    "    plt.show()\n",
    "graph_corr(filtered_tickers_list, max_deviation_portfolio)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dowORdqV_iHj"
   },
   "source": [
    "## Simulations\n",
    "\n",
    "Using data from the past 8-9 months, we test the three min-max portfolios to see which one performs the best most frequently. For the date range our close-price data covers, we take every stretch of 5 consecutive trading days (roughly a week's performance), and for each determine the hero stock that performs the best.\n",
    "\n",
    "The function simulate_mm_pf simulates the performance of putting the appropriate amount of money into each stock. Given a start date and an end date, the function simulates the historical performance of the portfolio over the given time period. The function then returns the fraction of the portfolio assigned to each stock in a dictionary, along with the performance of the simulation.\n",
    "\n",
    "The function sim_winner takes in a list of hero stocks, a start date, an end date, a close price DataFrame and a Rate of Return Data Frame and produces the stock that performs the best when put into simulate_mm_pf.\n",
    "\n",
    "The function sim_win_over_data counts the amount of times a list of hero stocks wins over the course of all the data in a DataFrame of close prices and rate of return and returns the hero stock that won the most."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "jOoVAImJMJKu"
   },
   "outputs": [],
   "source": [
    "pf_init_value = 500000\n",
    "def simulate_mm_pf(hero_stock, corr_stocks, start_date, end_date, close_price_df):\n",
    "    '''\n",
    "        start_date and end_date must be trading days\n",
    "    '''\n",
    "    # Compiling the weights of the stocks\n",
    "    weight = {}\n",
    "    stock_count = 12\n",
    "    min_weight = 1 / (2 * stock_count)\n",
    "    max_weight = 0.25\n",
    "    sidekick_weight = 1 - 2 * max_weight - 9 * min_weight\n",
    "    \n",
    "    # Isolating the data from the df we need\n",
    "    pf_stock_info = pd.DataFrame()\n",
    "    pf_stock_info[hero_stock] = close_price_df[f'{hero_stock} Close']\n",
    "    for t in corr_stocks:\n",
    "        pf_stock_info[t] = close_price_df[f'{t} Close']\n",
    "    pf_stock_info = pf_stock_info[pf_stock_info.index >= start_date]\n",
    "    pf_stock_info = pf_stock_info[pf_stock_info.index <= end_date]\n",
    "    \n",
    "    # Making a dictionary of weights for each individual stock\n",
    "    weight[hero_stock] = max_weight\n",
    "    for stock in corr_stocks:\n",
    "        weight[stock] = min_weight\n",
    "    weight[corr_stocks[-2]] = sidekick_weight\n",
    "    weight[corr_stocks[-1]] = max_weight\n",
    "    \n",
    "    # Adjusting the values of the stock price to match initial investment amount\n",
    "    pf_stock_info['total'] = pf_stock_info[hero_stock] * pf_init_value * max_weight / pf_stock_info[hero_stock].iloc[0]\n",
    "    for stock in corr_stocks:\n",
    "        pf_stock_info['total'] = pf_stock_info['total'] + (pf_stock_info[stock] * pf_init_value * \n",
    "                                                           weight[stock] / pf_stock_info[stock].iloc[0])\n",
    "    \n",
    "    # Returns the amount the stock deviated from its initial value\n",
    "    performance = abs(pf_stock_info['total'].iloc[-1] - pf_init_value)\n",
    "    return (weight, performance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "Vkql6o8yMJKu"
   },
   "outputs": [],
   "source": [
    "def sim_winner(hero_stocks, start_date, end_date, close_price_df, ror_df):\n",
    "    performance = {}\n",
    "\n",
    "    # Runs the simulation for each hero stock\n",
    "    for hero in hero_stocks:\n",
    "        corr_stocks = find_corr_stocks(hero, ror_df)\n",
    "        performance[hero] = simulate_mm_pf(hero, corr_stocks, start_date, end_date, close_price_df)[1]\n",
    "    \n",
    "    # Returns the one that performed the best\n",
    "    winner = max(performance, key = performance.get)\n",
    "    return winner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 240
    },
    "id": "ybX74pIz_iHj",
    "outputId": "7d9b8763-56b1-489e-e4f1-c1c1856858ef"
   },
   "outputs": [],
   "source": [
    "def sim_win_over_data(hero_stocks, close_price_df, ror_df):\n",
    "    '''\n",
    "        Returns the hero stock with the highest success rate after running simulations on all data.\n",
    "    '''\n",
    "    trade_days = 5\n",
    "    close_df = close_price_df.reset_index()\n",
    "    win_dic = {}\n",
    "\n",
    "    # Initializing the dictionary for each hero stock\n",
    "    for hero in hero_stocks:\n",
    "        win_dic[hero] = 0\n",
    "\n",
    "    # Counting the number of times each hero stock wins\n",
    "    for x in range(len(close_df.index) - trade_days + 1):\n",
    "        temp_win = sim_winner(hero_stocks, \n",
    "                              close_df.loc[x, 'Date'], \n",
    "                              close_df.loc[x + trade_days - 1, 'Date'], \n",
    "                              close_price_df, ror_df)\n",
    "        win_dic[temp_win] += 1\n",
    "    \n",
    "    return max(win_dic, key = win_dic.get)\n",
    "\n",
    "ult_winner = sim_win_over_data([min_beta_stock, max_beta_stock, max_deviation_stock], \n",
    "                               filtered_close_price_df, \n",
    "                               filtered_ror_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "id": "ugg-Lcdk_iHj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max_beta\n"
     ]
    }
   ],
   "source": [
    "def determine_winning_portfolio(most_volatile_stock):\n",
    "    if ult_winner == max_beta_stock:\n",
    "        print('max_beta')\n",
    "    elif ult_winner == min_beta_stock:\n",
    "        print('min_beta')\n",
    "    else: \n",
    "        print('stdev')\n",
    "    final_info_dict = simulate_mm_pf(most_volatile_stock, find_corr_stocks(ult_winner, filtered_ror_df), filtered_close_price_df.index[0], \n",
    "                              filtered_close_price_df.index[-1], filtered_close_price_df)\n",
    "    return final_info_dict\n",
    "winning_info_dict = determine_winning_portfolio(ult_winner)[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_K8hwihGCboo"
   },
   "source": [
    "# Creating Final Portfolio\n",
    "In this final section we use the data structures created throughout our analysis to extract and derive important figures about each of the stocks in our investment. We will create a final portfolio dataframe which holds this necessary information. We end this project by outputting a condensed version of this dataframe as a csv file, holding the key details of The6ixRoboAdvisor's investment recommendation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "id": "P3PgzGAf_iHk"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>Price</th>\n",
       "      <th>Shares</th>\n",
       "      <th>Value</th>\n",
       "      <th>Weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PYPL</td>\n",
       "      <td>80.080002</td>\n",
       "      <td>1560.939025</td>\n",
       "      <td>125000.000000</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>QCOM</td>\n",
       "      <td>123.449997</td>\n",
       "      <td>168.759286</td>\n",
       "      <td>20833.333333</td>\n",
       "      <td>4.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>148.110001</td>\n",
       "      <td>140.661220</td>\n",
       "      <td>20833.333333</td>\n",
       "      <td>4.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MSFT</td>\n",
       "      <td>247.490005</td>\n",
       "      <td>84.178483</td>\n",
       "      <td>20833.333333</td>\n",
       "      <td>4.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>SBUX</td>\n",
       "      <td>99.559998</td>\n",
       "      <td>209.254056</td>\n",
       "      <td>20833.333333</td>\n",
       "      <td>4.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>TXN</td>\n",
       "      <td>177.070007</td>\n",
       "      <td>117.655913</td>\n",
       "      <td>20833.333333</td>\n",
       "      <td>4.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NKE</td>\n",
       "      <td>105.959999</td>\n",
       "      <td>196.615077</td>\n",
       "      <td>20833.333333</td>\n",
       "      <td>4.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>BLK</td>\n",
       "      <td>737.780029</td>\n",
       "      <td>28.237866</td>\n",
       "      <td>20833.333333</td>\n",
       "      <td>4.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>BK</td>\n",
       "      <td>45.669998</td>\n",
       "      <td>456.171101</td>\n",
       "      <td>20833.333333</td>\n",
       "      <td>4.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>GM</td>\n",
       "      <td>40.459999</td>\n",
       "      <td>514.911859</td>\n",
       "      <td>20833.333333</td>\n",
       "      <td>4.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>MS</td>\n",
       "      <td>90.910004</td>\n",
       "      <td>687.493097</td>\n",
       "      <td>62500.000000</td>\n",
       "      <td>12.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>ACN</td>\n",
       "      <td>296.399994</td>\n",
       "      <td>421.727404</td>\n",
       "      <td>125000.000000</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Ticker       Price       Shares          Value     Weight\n",
       "1    PYPL   80.080002  1560.939025  125000.000000  25.000000\n",
       "2    QCOM  123.449997   168.759286   20833.333333   4.166667\n",
       "3    AAPL  148.110001   140.661220   20833.333333   4.166667\n",
       "4    MSFT  247.490005    84.178483   20833.333333   4.166667\n",
       "5    SBUX   99.559998   209.254056   20833.333333   4.166667\n",
       "6     TXN  177.070007   117.655913   20833.333333   4.166667\n",
       "7     NKE  105.959999   196.615077   20833.333333   4.166667\n",
       "8     BLK  737.780029    28.237866   20833.333333   4.166667\n",
       "9      BK   45.669998   456.171101   20833.333333   4.166667\n",
       "10     GM   40.459999   514.911859   20833.333333   4.166667\n",
       "11     MS   90.910004   687.493097   62500.000000  12.500000\n",
       "12    ACN  296.399994   421.727404  125000.000000  25.000000"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def create_final_portfolio(portfolio_info, initial_investment):\n",
    "    \n",
    "    #Create final dataframe with initial ticker and weight data which is easily accessed\n",
    "    data = {'Ticker':winning_info_dict.keys(), 'Weight':winning_info_dict.values()}\n",
    "    Portfolio_Final = pd.DataFrame(data)\n",
    "    \n",
    "    #Append the prices of each stock into a list\n",
    "    prices = []\n",
    "    for tick in Portfolio_Final.Ticker:\n",
    "        prices.append(filtered_close_price_df.loc['11-25-2022', f'{tick} Close'])\n",
    "        \n",
    "    #Insert the remaining required columns into the right position in the final dataframe\n",
    "    Portfolio_Final.insert(1, 'Price', prices)\n",
    "    Portfolio_Final.insert(2, 'Shares', (initial_investment * Portfolio_Final['Weight']) / Portfolio_Final['Price'])\n",
    "    Portfolio_Final.insert(3, 'Value', Portfolio_Final['Shares'] * Portfolio_Final['Price'])\n",
    "    \n",
    "    #Ensure weights are expressed as percentages and indexes start from 1 to the number of stocks invested in\n",
    "    Portfolio_Final.Weight *= 100\n",
    "    Portfolio_Final.index += 1 \n",
    "    return Portfolio_Final\n",
    "Portfolio_Final = create_final_portfolio(winning_info_dict, 500000)\n",
    "Portfolio_Final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "id": "PWbNoygUaAhS"
   },
   "outputs": [],
   "source": [
    "#Here we simply create a csv file corresponding to the final dataframe's index, ticker and shares column\n",
    "def build_investment_csv(final_portfolio):\n",
    "    Stocks_Final = Portfolio_Final[['Ticker','Shares']]\n",
    "    Stocks_Final.to_csv('Stocks_Group_6.csv')\n",
    "Stocks_Group_6_CSV = build_investment_csv(Portfolio_Final)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Contribution Declaration\n",
    "\n",
    "The following team members made a meaningful contribution to this assignment:\n",
    "\n",
    "Haaris, Andrew and Alan"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
